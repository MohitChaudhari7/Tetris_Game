
final_project_tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b8  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe4  08004fe4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe4  08004fe4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe4  08004fe4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000001c  08005008  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005008  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009894  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002006  00000000  00000000  00029923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000629  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169bf  00000000  00000000  0002c7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b99c  00000000  00000000  00043198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b637  00000000  00000000  0004eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002014  00000000  00000000  000da16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ec  00000000  00000000  000dc180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f14 	.word	0x08002f14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08002f14 	.word	0x08002f14

080001d8 <get_dir>:
 * 			s: If user is pressing down direction on the joystick
 * 			a: If user is pressing left direction on the joystick
 * 			d: If user is pressing right direction on the joystick
 * 			0: If user is not giving any input on the joystick
 */
char get_dir(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	Get_JoyStick_Val();
 80001dc:	f000 f826 	bl	800022c <Get_JoyStick_Val>

	if(Joy_X > JoyStick_Right_Threshold)
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <get_dir+0x4c>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d901      	bls.n	80001f0 <get_dir+0x18>
		return 'd';
 80001ec:	2364      	movs	r3, #100	; 0x64
 80001ee:	e016      	b.n	800021e <get_dir+0x46>

	if(Joy_X < JoyStick_Left_Threshold)
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <get_dir+0x4c>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80001f8:	d201      	bcs.n	80001fe <get_dir+0x26>
		return 'a';
 80001fa:	2361      	movs	r3, #97	; 0x61
 80001fc:	e00f      	b.n	800021e <get_dir+0x46>

	if(Joy_Y < JoyStick_Down_Threshold)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <get_dir+0x50>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000206:	d201      	bcs.n	800020c <get_dir+0x34>
		return 's';
 8000208:	2373      	movs	r3, #115	; 0x73
 800020a:	e008      	b.n	800021e <get_dir+0x46>

	if(Joy_Y > JoyStick_Up_Threshold)
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <get_dir+0x50>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	f640 0298 	movw	r2, #2200	; 0x898
 8000214:	4293      	cmp	r3, r2
 8000216:	d901      	bls.n	800021c <get_dir+0x44>
		return 'w';
 8000218:	2377      	movs	r3, #119	; 0x77
 800021a:	e000      	b.n	800021e <get_dir+0x46>

	return '0';
 800021c:	2330      	movs	r3, #48	; 0x30
}
 800021e:	4618      	mov	r0, r3
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000038 	.word	0x20000038
 8000228:	2000003a 	.word	0x2000003a

0800022c <Get_JoyStick_Val>:

/**
 * @brief	Starts the ADC convertion to get the current Joysstick value
 * @return	None
 */
void Get_JoyStick_Val(){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	// Start conversion:
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <Get_JoyStick_Val+0x4c>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a10      	ldr	r2, [pc, #64]	; (8000278 <Get_JoyStick_Val+0x4c>)
 8000236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800023a:	6093      	str	r3, [r2, #8]

	/*
	 * Wait till the conversion is over and save the conversion data for Y-Axis
	 * into a variable
	 */
	while((ADC1->SR & ADC_SR_EOC) == 0);
 800023c:	bf00      	nop
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <Get_JoyStick_Val+0x4c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <Get_JoyStick_Val+0x12>
	Joy_Y = ADC1->DR;
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <Get_JoyStick_Val+0x4c>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	b29a      	uxth	r2, r3
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <Get_JoyStick_Val+0x50>)
 8000252:	801a      	strh	r2, [r3, #0]

	/*
	 * Wait till the conversion is over and save the conversion data for X-Axis
	 * into a variable
	 */
	while((ADC1->SR & ADC_SR_EOC) == 0);
 8000254:	bf00      	nop
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <Get_JoyStick_Val+0x4c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <Get_JoyStick_Val+0x2a>
	Joy_X = ADC1->DR;
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <Get_JoyStick_Val+0x4c>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <Get_JoyStick_Val+0x54>)
 800026a:	801a      	strh	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40012000 	.word	0x40012000
 800027c:	2000003a 	.word	0x2000003a
 8000280:	20000038 	.word	0x20000038

08000284 <Init_JoyStick>:
/**
 * @brief	Initializes the ADC1 and Port C to get input from the Joystick on
 * 			pins PC1 for Y-Axis data and PC2 for X-Axis data
 * @return	None
 */
void Init_JoyStick(){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	// Send clock signal to enable GPIO port C and ADC
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000288:	4b33      	ldr	r3, [pc, #204]	; (8000358 <Init_JoyStick+0xd4>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a32      	ldr	r2, [pc, #200]	; (8000358 <Init_JoyStick+0xd4>)
 800028e:	f043 0304 	orr.w	r3, r3, #4
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <Init_JoyStick+0xd4>)
 8000296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000298:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <Init_JoyStick+0xd4>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6453      	str	r3, [r2, #68]	; 0x44

	// Setting PC1 and PC2 to analog mode
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;
 80002a0:	4b2e      	ldr	r3, [pc, #184]	; (800035c <Init_JoyStick+0xd8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2d      	ldr	r2, [pc, #180]	; (800035c <Init_JoyStick+0xd8>)
 80002a6:	f023 030c 	bic.w	r3, r3, #12
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1;
 80002ac:	4b2b      	ldr	r3, [pc, #172]	; (800035c <Init_JoyStick+0xd8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <Init_JoyStick+0xd8>)
 80002b2:	f043 030c 	orr.w	r3, r3, #12
 80002b6:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER2_Msk;
 80002b8:	4b28      	ldr	r3, [pc, #160]	; (800035c <Init_JoyStick+0xd8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a27      	ldr	r2, [pc, #156]	; (800035c <Init_JoyStick+0xd8>)
 80002be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER2_1;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <Init_JoyStick+0xd8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a24      	ldr	r2, [pc, #144]	; (800035c <Init_JoyStick+0xd8>)
 80002ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002ce:	6013      	str	r3, [r2, #0]

	// Turning ADC OFF
	ADC1->CR2 = 0;
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <Init_JoyStick+0xdc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]

	// Setting total number of regular conversions as 2
	ADC1->SQR1 &= ~ADC_SQR1_L_Msk;
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <Init_JoyStick+0xdc>)
 80002d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002da:	4a21      	ldr	r2, [pc, #132]	; (8000360 <Init_JoyStick+0xdc>)
 80002dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002e0:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_0;
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <Init_JoyStick+0xdc>)
 80002e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e6:	4a1e      	ldr	r2, [pc, #120]	; (8000360 <Init_JoyStick+0xdc>)
 80002e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ec:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Setting conversion sequence as PC1, PC2
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <Init_JoyStick+0xdc>)
 80002f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f2:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <Init_JoyStick+0xdc>)
 80002f4:	f023 031f 	bic.w	r3, r3, #31
 80002f8:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= 0x0B << ADC_SQR3_SQ1_Pos;
 80002fa:	4b19      	ldr	r3, [pc, #100]	; (8000360 <Init_JoyStick+0xdc>)
 80002fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <Init_JoyStick+0xdc>)
 8000300:	f043 030b 	orr.w	r3, r3, #11
 8000304:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 &= ~ADC_SQR3_SQ2_Msk;
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <Init_JoyStick+0xdc>)
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <Init_JoyStick+0xdc>)
 800030c:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8000310:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= 0x0C << ADC_SQR3_SQ2_Pos;
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <Init_JoyStick+0xdc>)
 8000314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <Init_JoyStick+0xdc>)
 8000318:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800031c:	6353      	str	r3, [r2, #52]	; 0x34

	// Using SCAN mode by setting the SCAN bit in the CR1 reg.
	ADC1->CR2 &= ~ADC_CR2_CONT;
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <Init_JoyStick+0xdc>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <Init_JoyStick+0xdc>)
 8000324:	f023 0302 	bic.w	r3, r3, #2
 8000328:	6093      	str	r3, [r2, #8]

	// Doing continous conversion by setting CONT bit to 0 in CR2
	ADC1->CR1 |= ADC_CR1_SCAN;
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <Init_JoyStick+0xdc>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <Init_JoyStick+0xdc>)
 8000330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000334:	6053      	str	r3, [r2, #4]

	// Setting ADC to generate a EOC bit after the end of conversion of
	// each channel in the reqular sequence
	ADC1->CR2 |= ADC_CR2_EOCS;
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <Init_JoyStick+0xdc>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <Init_JoyStick+0xdc>)
 800033c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000340:	6093      	str	r3, [r2, #8]

	// Power-on the ADC
	ADC1->CR2 |= ADC_CR2_ADON;
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <Init_JoyStick+0xdc>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	4a06      	ldr	r2, [pc, #24]	; (8000360 <Init_JoyStick+0xdc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6093      	str	r3, [r2, #8]
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40023800 	.word	0x40023800
 800035c:	40020800 	.word	0x40020800
 8000360:	40012000 	.word	0x40012000

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <__NVIC_EnableIRQ+0x38>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000e100 	.word	0xe000e100

080003a0 <Init_Timer2>:
 * @brief	Initializing timer 2 to run for 20ms.
 *
 * @return	none
 */
void Init_Timer2(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	// Send clock signal to Timer 2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <Init_Timer2+0x54>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <Init_Timer2+0x54>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6413      	str	r3, [r2, #64]	; 0x40

	// Setting prescaler to 159 to get 100KHz clock signal
	TIM2->PSC = 159;
 80003b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b4:	229f      	movs	r2, #159	; 0x9f
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28

	// 200ms
	TIM2->ARR = 20000;
 80003b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003bc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c

  	// Enabling the Interrupt for timer 2 and clearing the interrupt status
    TIM2->DIER |= TIM_DIER_UIE;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	60d3      	str	r3, [r2, #12]
    TIM2->SR &= ~TIM_SR_UIF;
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	f023 0301 	bic.w	r3, r3, #1
 80003e0:	6113      	str	r3, [r2, #16]
	NVIC_EnableIRQ(TIM2_IRQn);
 80003e2:	201c      	movs	r0, #28
 80003e4:	f7ff ffbe 	bl	8000364 <__NVIC_EnableIRQ>

    TIM2->CR1 = (1 << 0);
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ec:	2201      	movs	r2, #1
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40023800 	.word	0x40023800

080003f8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

	// Re-settign timer3 ISR
	TIM2->SR &= ~TIM_SR_UIF;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	6113      	str	r3, [r2, #16]

	Timer2_flag = 1;
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <TIM2_IRQHandler+0x2c>)
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]

    // Starting timer 2
    TIM2->CR1 = (1 << 0);
 8000412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000416:	2201      	movs	r2, #1
 8000418:	601a      	str	r2, [r3, #0]
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	20000044 	.word	0x20000044

08000428 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

	// Re-settign timer3 ISR
	TIM3->SR &= ~TIM_SR_UIF;
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <TIM3_IRQHandler+0x28>)
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <TIM3_IRQHandler+0x28>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6113      	str	r3, [r2, #16]

	Timer3_flag = 1;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <TIM3_IRQHandler+0x2c>)
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]

    // Starting timer 3
    TIM3->CR1 = (1 << 0);
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <TIM3_IRQHandler+0x28>)
 8000440:	2201      	movs	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40000400 	.word	0x40000400
 8000454:	20000040 	.word	0x20000040

08000458 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	TIM4->SR &= ~TIM_SR_UIF;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <TIM4_IRQHandler+0x28>)
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	4a07      	ldr	r2, [pc, #28]	; (8000480 <TIM4_IRQHandler+0x28>)
 8000462:	f023 0301 	bic.w	r3, r3, #1
 8000466:	6113      	str	r3, [r2, #16]

	Timer4_flag = 1;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <TIM4_IRQHandler+0x2c>)
 800046a:	2201      	movs	r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    // Start Timer 4
    TIM4->CR1 = (1 << 0);
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <TIM4_IRQHandler+0x28>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40000800 	.word	0x40000800
 8000484:	2000003c 	.word	0x2000003c

08000488 <FG_Init>:
#define FRAME_Y2 317

uint16_t frame[LCD_WIDTH][LCD_HEIGHT];

void FG_Init()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af04      	add	r7, sp, #16
	LCD_Clear(LCD_BLACK);
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f8f5 	bl	800067e <LCD_Clear>
	LCD_Rectangle(FRAME_X1-2,FRAME_Y1-2,FRAME_X2+2,FRAME_Y2+2,LCD_WHITE,2);
 8000494:	2302      	movs	r3, #2
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	f240 133f 	movw	r3, #319	; 0x13f
 80004a2:	228f      	movs	r2, #143	; 0x8f
 80004a4:	2123      	movs	r1, #35	; 0x23
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 f965 	bl	8000776 <LCD_Rectangle>
	LCD_WriteString(0,0,"TETRIS", Font_16x26,0xFFFF, 0x0000);
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <FG_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	9202      	str	r2, [sp, #8]
 80004b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004b6:	9201      	str	r2, [sp, #4]
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a0c      	ldr	r2, [pc, #48]	; (80004f0 <FG_Init+0x68>)
 80004c0:	2100      	movs	r1, #0
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fb9f 	bl	8000c06 <LCD_WriteString>
	LCD_WriteString(FRAME_X2 + 9,FRAME_Y1,"Score:",Font_11x18,0xFFFF, 0x0000);
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <FG_Init+0x6c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	9202      	str	r2, [sp, #8]
 80004ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <FG_Init+0x70>)
 80004dc:	2125      	movs	r1, #37	; 0x25
 80004de:	2096      	movs	r0, #150	; 0x96
 80004e0:	f000 fb91 	bl	8000c06 <LCD_WriteString>
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000008 	.word	0x20000008
 80004f0:	08002f2c 	.word	0x08002f2c
 80004f4:	20000000 	.word	0x20000000
 80004f8:	08002f34 	.word	0x08002f34

080004fc <delay>:
#include "spi.h"
#include "testimg.h"
#include "fonts.h"

void delay(unsigned int iter)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	for(int i =0 ; i <iter;i++)
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e002      	b.n	8000510 <delay+0x14>
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	3301      	adds	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	d8f8      	bhi.n	800050a <delay+0xe>
		;
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <LCD_WriteCommand>:

	return x;
}

void LCD_WriteCommand(uint8_t cmd)//command write
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	(GPIOA->BSRR) |= (1 << 16);
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800053c:	6193      	str	r3, [r2, #24]
	(GPIOA->BSRR) |= (1 << 17);//dc and cs both low to send command
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000548:	6193      	str	r3, [r2, #24]
	SPI1_SendData(cmd);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fe49 	bl	80011e4 <SPI1_SendData>
	(GPIOA->BSRR) |= (1 << 0);
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6193      	str	r3, [r2, #24]
	(GPIOA->BSRR) |= (1 << 1);
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a04      	ldr	r2, [pc, #16]	; (8000574 <LCD_WriteCommand+0x4c>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6193      	str	r3, [r2, #24]
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020000 	.word	0x40020000

08000578 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)//data write
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	(GPIOA->BSRR) |= (1 << 16);//dc and cs both low to send command
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <LCD_WriteData+0x40>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <LCD_WriteData+0x40>)
 8000588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058c:	6193      	str	r3, [r2, #24]
	//delay(1000);//little delay
	(GPIOA->BSRR) |= (1 << 1);
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <LCD_WriteData+0x40>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <LCD_WriteData+0x40>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6193      	str	r3, [r2, #24]
	SPI1_SendData(data);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fe21 	bl	80011e4 <SPI1_SendData>
	(GPIOA->BSRR) |= (1 << 0);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <LCD_WriteData+0x40>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <LCD_WriteData+0x40>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020000 	.word	0x40020000

080005bc <LCD_SendColour>:
//set colour for drawing
void LCD_SendColour(uint16_t colour)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
	LCD_WriteData(colour>>8);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ffd2 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(colour & 0xFF);
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffcd 	bl	8000578 <LCD_WriteData>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LCD_SetAddress>:
void LCD_SetAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4604      	mov	r4, r0
 80005ee:	4608      	mov	r0, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	461a      	mov	r2, r3
 80005f4:	4623      	mov	r3, r4
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4603      	mov	r3, r0
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
 8000600:	4613      	mov	r3, r2
 8000602:	803b      	strh	r3, [r7, #0]
	LCD_WriteCommand(0x2A);
 8000604:	202a      	movs	r0, #42	; 0x2a
 8000606:	f7ff ff8f 	bl	8000528 <LCD_WriteCommand>
	LCD_WriteData(x1>>8);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	b29b      	uxth	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffb0 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(x1);
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffab 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(x2>>8);
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffa4 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(x2);
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff9f 	bl	8000578 <LCD_WriteData>

	LCD_WriteCommand(0x2B);
 800063a:	202b      	movs	r0, #43	; 0x2b
 800063c:	f7ff ff74 	bl	8000528 <LCD_WriteCommand>
	LCD_WriteData(y1>>8);
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	b29b      	uxth	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff95 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(y1);
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff90 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(y2>>8);
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff89 	bl	8000578 <LCD_WriteData>
	LCD_WriteData(y2);
 8000666:	883b      	ldrh	r3, [r7, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff84 	bl	8000578 <LCD_WriteData>

	LCD_WriteCommand(0x2C);//meory write
 8000670:	202c      	movs	r0, #44	; 0x2c
 8000672:	f7ff ff59 	bl	8000528 <LCD_WriteCommand>
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}

0800067e <LCD_Clear>:
//clear lcd and fill with colour
void LCD_Clear(uint16_t colour)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b084      	sub	sp, #16
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	LCD_SetAddress(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 8000688:	f240 133f 	movw	r3, #319	; 0x13f
 800068c:	22ef      	movs	r2, #239	; 0xef
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ffa8 	bl	80005e6 <LCD_SetAddress>

	for(i=0;i<LCD_WIDTH;i++)
 8000696:	2300      	movs	r3, #0
 8000698:	81fb      	strh	r3, [r7, #14]
 800069a:	e010      	b.n	80006be <LCD_Clear+0x40>
	{
		for(j=0;j<LCD_HEIGHT;j++)
 800069c:	2300      	movs	r3, #0
 800069e:	81bb      	strh	r3, [r7, #12]
 80006a0:	e006      	b.n	80006b0 <LCD_Clear+0x32>
		{
			LCD_SendColour(colour);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff89 	bl	80005bc <LCD_SendColour>
		for(j=0;j<LCD_HEIGHT;j++)
 80006aa:	89bb      	ldrh	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	81bb      	strh	r3, [r7, #12]
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006b6:	d3f4      	bcc.n	80006a2 <LCD_Clear+0x24>
	for(i=0;i<LCD_WIDTH;i++)
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	3301      	adds	r3, #1
 80006bc:	81fb      	strh	r3, [r7, #14]
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	2bef      	cmp	r3, #239	; 0xef
 80006c2:	d9eb      	bls.n	800069c <LCD_Clear+0x1e>
		}
	}
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <LCD_Fill>:
void LCD_Fill(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t colour, uint16_t border)
{
 80006ce:	b590      	push	{r4, r7, lr}
 80006d0:	b085      	sub	sp, #20
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4604      	mov	r4, r0
 80006d6:	4608      	mov	r0, r1
 80006d8:	4611      	mov	r1, r2
 80006da:	461a      	mov	r2, r3
 80006dc:	4623      	mov	r3, r4
 80006de:	80fb      	strh	r3, [r7, #6]
 80006e0:	4603      	mov	r3, r0
 80006e2:	80bb      	strh	r3, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
 80006e8:	4613      	mov	r3, r2
 80006ea:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	LCD_SetAddress(x1,y1,x2,y2);
 80006ec:	883b      	ldrh	r3, [r7, #0]
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	88b9      	ldrh	r1, [r7, #4]
 80006f2:	88f8      	ldrh	r0, [r7, #6]
 80006f4:	f7ff ff77 	bl	80005e6 <LCD_SetAddress>

	for(i = x1; i <= x2; i++)
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	81fb      	strh	r3, [r7, #14]
 80006fc:	e032      	b.n	8000764 <LCD_Fill+0x96>
	{
		for(j = y1; j <= y2; j++)
 80006fe:	88bb      	ldrh	r3, [r7, #4]
 8000700:	81bb      	strh	r3, [r7, #12]
 8000702:	e028      	b.n	8000756 <LCD_Fill+0x88>
		{
			if((i < (x1 + border)) || (i > (x2 - border)))
 8000704:	89fa      	ldrh	r2, [r7, #14]
 8000706:	88f9      	ldrh	r1, [r7, #6]
 8000708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800070a:	440b      	add	r3, r1
 800070c:	429a      	cmp	r2, r3
 800070e:	db05      	blt.n	800071c <LCD_Fill+0x4e>
 8000710:	89fa      	ldrh	r2, [r7, #14]
 8000712:	8879      	ldrh	r1, [r7, #2]
 8000714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000716:	1acb      	subs	r3, r1, r3
 8000718:	429a      	cmp	r2, r3
 800071a:	dd04      	ble.n	8000726 <LCD_Fill+0x58>
				LCD_SendColour(0x1042);
 800071c:	f241 0042 	movw	r0, #4162	; 0x1042
 8000720:	f7ff ff4c 	bl	80005bc <LCD_SendColour>
 8000724:	e014      	b.n	8000750 <LCD_Fill+0x82>
			else if((j < (y1 + border)) || (j > (y2 - border)))
 8000726:	89ba      	ldrh	r2, [r7, #12]
 8000728:	88b9      	ldrh	r1, [r7, #4]
 800072a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800072c:	440b      	add	r3, r1
 800072e:	429a      	cmp	r2, r3
 8000730:	db05      	blt.n	800073e <LCD_Fill+0x70>
 8000732:	89ba      	ldrh	r2, [r7, #12]
 8000734:	8839      	ldrh	r1, [r7, #0]
 8000736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000738:	1acb      	subs	r3, r1, r3
 800073a:	429a      	cmp	r2, r3
 800073c:	dd04      	ble.n	8000748 <LCD_Fill+0x7a>
				LCD_SendColour(0x1042);
 800073e:	f241 0042 	movw	r0, #4162	; 0x1042
 8000742:	f7ff ff3b 	bl	80005bc <LCD_SendColour>
 8000746:	e003      	b.n	8000750 <LCD_Fill+0x82>
			else
				LCD_SendColour(colour);
 8000748:	8c3b      	ldrh	r3, [r7, #32]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff36 	bl	80005bc <LCD_SendColour>
		for(j = y1; j <= y2; j++)
 8000750:	89bb      	ldrh	r3, [r7, #12]
 8000752:	3301      	adds	r3, #1
 8000754:	81bb      	strh	r3, [r7, #12]
 8000756:	89ba      	ldrh	r2, [r7, #12]
 8000758:	883b      	ldrh	r3, [r7, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d9d2      	bls.n	8000704 <LCD_Fill+0x36>
	for(i = x1; i <= x2; i++)
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	81fb      	strh	r3, [r7, #14]
 8000764:	89fa      	ldrh	r2, [r7, #14]
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	429a      	cmp	r2, r3
 800076a:	d9c8      	bls.n	80006fe <LCD_Fill+0x30>
		}
	}
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}

08000776 <LCD_Rectangle>:
void LCD_Rectangle(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t colour,uint16_t border)
{
 8000776:	b590      	push	{r4, r7, lr}
 8000778:	b085      	sub	sp, #20
 800077a:	af02      	add	r7, sp, #8
 800077c:	4604      	mov	r4, r0
 800077e:	4608      	mov	r0, r1
 8000780:	4611      	mov	r1, r2
 8000782:	461a      	mov	r2, r3
 8000784:	4623      	mov	r3, r4
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4603      	mov	r3, r0
 800078a:	80bb      	strh	r3, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
 8000790:	4613      	mov	r3, r2
 8000792:	803b      	strh	r3, [r7, #0]
	LCD_Fill(x1,y1,x2,y1+border-1,colour,0);
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	8bbb      	ldrh	r3, [r7, #28]
 8000798:	4413      	add	r3, r2
 800079a:	b29b      	uxth	r3, r3
 800079c:	3b01      	subs	r3, #1
 800079e:	b29c      	uxth	r4, r3
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	88b9      	ldrh	r1, [r7, #4]
 80007a4:	88f8      	ldrh	r0, [r7, #6]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	8b3b      	ldrh	r3, [r7, #24]
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4623      	mov	r3, r4
 80007b0:	f7ff ff8d 	bl	80006ce <LCD_Fill>
	LCD_Fill(x1,y1+border-1,x1+border-1,y2-border+1,colour,0);
 80007b4:	88ba      	ldrh	r2, [r7, #4]
 80007b6:	8bbb      	ldrh	r3, [r7, #28]
 80007b8:	4413      	add	r3, r2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	3b01      	subs	r3, #1
 80007be:	b299      	uxth	r1, r3
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	8bbb      	ldrh	r3, [r7, #28]
 80007c4:	4413      	add	r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	3b01      	subs	r3, #1
 80007ca:	b29c      	uxth	r4, r3
 80007cc:	883a      	ldrh	r2, [r7, #0]
 80007ce:	8bbb      	ldrh	r3, [r7, #28]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	88f8      	ldrh	r0, [r7, #6]
 80007da:	2300      	movs	r3, #0
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	8b3b      	ldrh	r3, [r7, #24]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4613      	mov	r3, r2
 80007e4:	4622      	mov	r2, r4
 80007e6:	f7ff ff72 	bl	80006ce <LCD_Fill>
	LCD_Fill(x1,y2-border+1,x2,y2,colour,0);
 80007ea:	883a      	ldrh	r2, [r7, #0]
 80007ec:	8bbb      	ldrh	r3, [r7, #28]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	3301      	adds	r3, #1
 80007f4:	b299      	uxth	r1, r3
 80007f6:	883c      	ldrh	r4, [r7, #0]
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	88f8      	ldrh	r0, [r7, #6]
 80007fc:	2300      	movs	r3, #0
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	8b3b      	ldrh	r3, [r7, #24]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	f7ff ff62 	bl	80006ce <LCD_Fill>
	LCD_Fill(x2-border+1,y1+border-1,x2,y2,colour,0);
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	8bbb      	ldrh	r3, [r7, #28]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	3301      	adds	r3, #1
 8000814:	b298      	uxth	r0, r3
 8000816:	88ba      	ldrh	r2, [r7, #4]
 8000818:	8bbb      	ldrh	r3, [r7, #28]
 800081a:	4413      	add	r3, r2
 800081c:	b29b      	uxth	r3, r3
 800081e:	3b01      	subs	r3, #1
 8000820:	b299      	uxth	r1, r3
 8000822:	883c      	ldrh	r4, [r7, #0]
 8000824:	887a      	ldrh	r2, [r7, #2]
 8000826:	2300      	movs	r3, #0
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4623      	mov	r3, r4
 8000830:	f7ff ff4d 	bl	80006ce <LCD_Fill>
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <LCD_Init>:
void LCD_Init()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	// Give a clock to port A as pins PA5-thru-PA7 are connected to the gyro (pg 20 of UM1842) and
	// page 116 of RM0383 for the RCC AHB register info.
	(RCC->AHB1ENR) |= 1;
 8000840:	4bbc      	ldr	r3, [pc, #752]	; (8000b34 <LCD_Init+0x2f8>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4abb      	ldr	r2, [pc, #748]	; (8000b34 <LCD_Init+0x2f8>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6313      	str	r3, [r2, #48]	; 0x30

	// Give a clock to port E as pin PE3 is connected to the chip select of the gyro (pg 20 of
	// UM1842) and page 116 of RM0383 for the RCC AHB register info.
	(RCC->AHB1ENR) |= (1 << 4);
 800084c:	4bb9      	ldr	r3, [pc, #740]	; (8000b34 <LCD_Init+0x2f8>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4ab8      	ldr	r2, [pc, #736]	; (8000b34 <LCD_Init+0x2f8>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER  &= ~(0x3 << (0));
 8000858:	4bb7      	ldr	r3, [pc, #732]	; (8000b38 <LCD_Init+0x2fc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4ab6      	ldr	r2, [pc, #728]	; (8000b38 <LCD_Init+0x2fc>)
 800085e:	f023 0303 	bic.w	r3, r3, #3
 8000862:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  (0x1 << (0));
 8000864:	4bb4      	ldr	r3, [pc, #720]	; (8000b38 <LCD_Init+0x2fc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4ab3      	ldr	r2, [pc, #716]	; (8000b38 <LCD_Init+0x2fc>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 0);
 8000870:	4bb1      	ldr	r3, [pc, #708]	; (8000b38 <LCD_Init+0x2fc>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4ab0      	ldr	r2, [pc, #704]	; (8000b38 <LCD_Init+0x2fc>)
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	6053      	str	r3, [r2, #4]
	GPIOA->MODER  &= ~(0x3 << (2));
 800087c:	4bae      	ldr	r3, [pc, #696]	; (8000b38 <LCD_Init+0x2fc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4aad      	ldr	r2, [pc, #692]	; (8000b38 <LCD_Init+0x2fc>)
 8000882:	f023 030c 	bic.w	r3, r3, #12
 8000886:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  (0x1 << (2));
 8000888:	4bab      	ldr	r3, [pc, #684]	; (8000b38 <LCD_Init+0x2fc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4aaa      	ldr	r2, [pc, #680]	; (8000b38 <LCD_Init+0x2fc>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 1);
 8000894:	4ba8      	ldr	r3, [pc, #672]	; (8000b38 <LCD_Init+0x2fc>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	4aa7      	ldr	r2, [pc, #668]	; (8000b38 <LCD_Init+0x2fc>)
 800089a:	f023 0302 	bic.w	r3, r3, #2
 800089e:	6053      	str	r3, [r2, #4]
	// See pg 20 of the ST UM1842 document.  We'll be using SPI1 to communicate with the gyro.
	// See pg 149 of RM0383.  It shows SPI1 to be alternate function 5.
	// See pg 156 of RM0383 for documentation on the GPIO mode register.  It shows how to set
	// pins to alternate mode.  We do this for pins PA5, PA6, PA7.
	(GPIOE->MODER) |= ((1 << 0) | (1 << 2) | (1 << 4));
 80008a0:	4ba6      	ldr	r3, [pc, #664]	; (8000b3c <LCD_Init+0x300>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4aa5      	ldr	r2, [pc, #660]	; (8000b3c <LCD_Init+0x300>)
 80008a6:	f043 0315 	orr.w	r3, r3, #21
 80008aa:	6013      	str	r3, [r2, #0]
//	GPIOD->OTYPER &= ~(1 << GREEN_LED_PIN);


	// Set the pins to fast speed.  See pg 157 for more info on the register.  Pin 5 corresponds to
	// bits 10/11, 6=12/13, and 7=14,15.  And for port E pin 3 corresponds to bits 6/7.
	(GPIOA->OSPEEDR) |= ( (2 << 0)| (2 << 2));
 80008ac:	4ba2      	ldr	r3, [pc, #648]	; (8000b38 <LCD_Init+0x2fc>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4aa1      	ldr	r2, [pc, #644]	; (8000b38 <LCD_Init+0x2fc>)
 80008b2:	f043 030a 	orr.w	r3, r3, #10
 80008b6:	6093      	str	r3, [r2, #8]
	(GPIOE->OSPEEDR) |= ((2 << 0) | (2 << 2) | (2 << 4));
 80008b8:	4ba0      	ldr	r3, [pc, #640]	; (8000b3c <LCD_Init+0x300>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	4a9f      	ldr	r2, [pc, #636]	; (8000b3c <LCD_Init+0x300>)
 80008be:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 80008c2:	6093      	str	r3, [r2, #8]

	// Set the CS high on the gyro as setting it low indicates communication.  See
	// 25 of the L3GD20 datasheet and page 159 of RM0383 for more info on BSRR.
	(GPIOE->BSRR) |= ((1 << 0) | (1 << 1) | (1 << 2)); //cs
 80008c4:	4b9d      	ldr	r3, [pc, #628]	; (8000b3c <LCD_Init+0x300>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a9c      	ldr	r2, [pc, #624]	; (8000b3c <LCD_Init+0x300>)
 80008ca:	f043 0307 	orr.w	r3, r3, #7
 80008ce:	6193      	str	r3, [r2, #24]

	delay(100000);
 80008d0:	489b      	ldr	r0, [pc, #620]	; (8000b40 <LCD_Init+0x304>)
 80008d2:	f7ff fe13 	bl	80004fc <delay>
	GPIOE->BSRR |= (1 << 18);
 80008d6:	4b99      	ldr	r3, [pc, #612]	; (8000b3c <LCD_Init+0x300>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	4a98      	ldr	r2, [pc, #608]	; (8000b3c <LCD_Init+0x300>)
 80008dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e0:	6193      	str	r3, [r2, #24]
	delay(100000);
 80008e2:	4897      	ldr	r0, [pc, #604]	; (8000b40 <LCD_Init+0x304>)
 80008e4:	f7ff fe0a 	bl	80004fc <delay>
	GPIOE->BSRR |= (1 << 2);
 80008e8:	4b94      	ldr	r3, [pc, #592]	; (8000b3c <LCD_Init+0x300>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a93      	ldr	r2, [pc, #588]	; (8000b3c <LCD_Init+0x300>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
	delay(100000);
 80008f4:	4892      	ldr	r0, [pc, #584]	; (8000b40 <LCD_Init+0x304>)
 80008f6:	f7ff fe01 	bl	80004fc <delay>

	LCD_WriteCommand(0x01);//soft reset
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe14 	bl	8000528 <LCD_WriteCommand>
	delay(1000000);
 8000900:	4890      	ldr	r0, [pc, #576]	; (8000b44 <LCD_Init+0x308>)
 8000902:	f7ff fdfb 	bl	80004fc <delay>

    LCD_WriteCommand(0xEF);
 8000906:	20ef      	movs	r0, #239	; 0xef
 8000908:	f7ff fe0e 	bl	8000528 <LCD_WriteCommand>
    LCD_WriteData(0x03);
 800090c:	2003      	movs	r0, #3
 800090e:	f7ff fe33 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0x80);
 8000912:	2080      	movs	r0, #128	; 0x80
 8000914:	f7ff fe30 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000918:	2002      	movs	r0, #2
 800091a:	f7ff fe2d 	bl	8000578 <LCD_WriteData>

    LCD_WriteCommand(0xCF);
 800091e:	20cf      	movs	r0, #207	; 0xcf
 8000920:	f7ff fe02 	bl	8000528 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe27 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0XC1);
 800092a:	20c1      	movs	r0, #193	; 0xc1
 800092c:	f7ff fe24 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0X30);
 8000930:	2030      	movs	r0, #48	; 0x30
 8000932:	f7ff fe21 	bl	8000578 <LCD_WriteData>

    LCD_WriteCommand(0xED);
 8000936:	20ed      	movs	r0, #237	; 0xed
 8000938:	f7ff fdf6 	bl	8000528 <LCD_WriteCommand>
    LCD_WriteData(0x64);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f7ff fe1b 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0x03);
 8000942:	2003      	movs	r0, #3
 8000944:	f7ff fe18 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0X12);
 8000948:	2012      	movs	r0, #18
 800094a:	f7ff fe15 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0X81);
 800094e:	2081      	movs	r0, #129	; 0x81
 8000950:	f7ff fe12 	bl	8000578 <LCD_WriteData>

    LCD_WriteCommand(0xE8);
 8000954:	20e8      	movs	r0, #232	; 0xe8
 8000956:	f7ff fde7 	bl	8000528 <LCD_WriteCommand>
    LCD_WriteData(0x85);
 800095a:	2085      	movs	r0, #133	; 0x85
 800095c:	f7ff fe0c 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fe09 	bl	8000578 <LCD_WriteData>
    LCD_WriteData(0x78);
 8000966:	2078      	movs	r0, #120	; 0x78
 8000968:	f7ff fe06 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(0xCB);
 800096c:	20cb      	movs	r0, #203	; 0xcb
 800096e:	f7ff fddb 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x39);
 8000972:	2039      	movs	r0, #57	; 0x39
 8000974:	f7ff fe00 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x2C);
 8000978:	202c      	movs	r0, #44	; 0x2c
 800097a:	f7ff fdfd 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x00);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fdfa 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x34);
 8000984:	2034      	movs	r0, #52	; 0x34
 8000986:	f7ff fdf7 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x02);
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff fdf4 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(0xF7);
 8000990:	20f7      	movs	r0, #247	; 0xf7
 8000992:	f7ff fdc9 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x20);
 8000996:	2020      	movs	r0, #32
 8000998:	f7ff fdee 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(0xEA);
 800099c:	20ea      	movs	r0, #234	; 0xea
 800099e:	f7ff fdc3 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fde8 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fde5 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_PWCTR1);    //Power control
 80009ae:	20c0      	movs	r0, #192	; 0xc0
 80009b0:	f7ff fdba 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x23);   //VRH[5:0]
 80009b4:	2023      	movs	r0, #35	; 0x23
 80009b6:	f7ff fddf 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_PWCTR2);    //Power control
 80009ba:	20c1      	movs	r0, #193	; 0xc1
 80009bc:	f7ff fdb4 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x10);   //SAP[2:0];BT[3:0]
 80009c0:	2010      	movs	r0, #16
 80009c2:	f7ff fdd9 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_VMCTR1);    //VCM control
 80009c6:	20c5      	movs	r0, #197	; 0xc5
 80009c8:	f7ff fdae 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x3e); //?????
 80009cc:	203e      	movs	r0, #62	; 0x3e
 80009ce:	f7ff fdd3 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x28);
 80009d2:	2028      	movs	r0, #40	; 0x28
 80009d4:	f7ff fdd0 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_VMCTR2);    //VCM control2
 80009d8:	20c7      	movs	r0, #199	; 0xc7
 80009da:	f7ff fda5 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x86);  //--
 80009de:	2086      	movs	r0, #134	; 0x86
 80009e0:	f7ff fdca 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_MADCTL);    // Memory Access Control
 80009e4:	2036      	movs	r0, #54	; 0x36
 80009e6:	f7ff fd9f 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x48);
 80009ea:	2048      	movs	r0, #72	; 0x48
 80009ec:	f7ff fdc4 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_PIXFMT);
 80009f0:	203a      	movs	r0, #58	; 0x3a
 80009f2:	f7ff fd99 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x55);
 80009f6:	2055      	movs	r0, #85	; 0x55
 80009f8:	f7ff fdbe 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_FRMCTR1);
 80009fc:	20b1      	movs	r0, #177	; 0xb1
 80009fe:	f7ff fd93 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x00);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fdb8 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x18);
 8000a08:	2018      	movs	r0, #24
 8000a0a:	f7ff fdb5 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_DFUNCTR);    // Display Function Control
 8000a0e:	20b6      	movs	r0, #182	; 0xb6
 8000a10:	f7ff fd8a 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x08);
 8000a14:	2008      	movs	r0, #8
 8000a16:	f7ff fdaf 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x82);
 8000a1a:	2082      	movs	r0, #130	; 0x82
 8000a1c:	f7ff fdac 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x27);
 8000a20:	2027      	movs	r0, #39	; 0x27
 8000a22:	f7ff fda9 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(0xF2);    // 3Gamma Function Disable
 8000a26:	20f2      	movs	r0, #242	; 0xf2
 8000a28:	f7ff fd7e 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fda3 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_GAMMASET);    //Gamma curve selected
 8000a32:	2026      	movs	r0, #38	; 0x26
 8000a34:	f7ff fd78 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x01);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fd9d 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_GMCTRP1);    //Set Gamma
 8000a3e:	20e0      	movs	r0, #224	; 0xe0
 8000a40:	f7ff fd72 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x0F);
 8000a44:	200f      	movs	r0, #15
 8000a46:	f7ff fd97 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x31);
 8000a4a:	2031      	movs	r0, #49	; 0x31
 8000a4c:	f7ff fd94 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x2B);
 8000a50:	202b      	movs	r0, #43	; 0x2b
 8000a52:	f7ff fd91 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0C);
 8000a56:	200c      	movs	r0, #12
 8000a58:	f7ff fd8e 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0E);
 8000a5c:	200e      	movs	r0, #14
 8000a5e:	f7ff fd8b 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x08);
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff fd88 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x4E);
 8000a68:	204e      	movs	r0, #78	; 0x4e
 8000a6a:	f7ff fd85 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0xF1);
 8000a6e:	20f1      	movs	r0, #241	; 0xf1
 8000a70:	f7ff fd82 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x37);
 8000a74:	2037      	movs	r0, #55	; 0x37
 8000a76:	f7ff fd7f 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x07);
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f7ff fd7c 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x10);
 8000a80:	2010      	movs	r0, #16
 8000a82:	f7ff fd79 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x03);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f7ff fd76 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0E);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f7ff fd73 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x09);
 8000a92:	2009      	movs	r0, #9
 8000a94:	f7ff fd70 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fd6d 	bl	8000578 <LCD_WriteData>

   LCD_WriteCommand(LCD_GMCTRN1);    //Set Gamma
 8000a9e:	20e1      	movs	r0, #225	; 0xe1
 8000aa0:	f7ff fd42 	bl	8000528 <LCD_WriteCommand>
   LCD_WriteData(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fd67 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0E);
 8000aaa:	200e      	movs	r0, #14
 8000aac:	f7ff fd64 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x14);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f7ff fd61 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x03);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff fd5e 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x11);
 8000abc:	2011      	movs	r0, #17
 8000abe:	f7ff fd5b 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x07);
 8000ac2:	2007      	movs	r0, #7
 8000ac4:	f7ff fd58 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x31);
 8000ac8:	2031      	movs	r0, #49	; 0x31
 8000aca:	f7ff fd55 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0xC1);
 8000ace:	20c1      	movs	r0, #193	; 0xc1
 8000ad0:	f7ff fd52 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x48);
 8000ad4:	2048      	movs	r0, #72	; 0x48
 8000ad6:	f7ff fd4f 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x08);
 8000ada:	2008      	movs	r0, #8
 8000adc:	f7ff fd4c 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0F);
 8000ae0:	200f      	movs	r0, #15
 8000ae2:	f7ff fd49 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0C);
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f7ff fd46 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x31);
 8000aec:	2031      	movs	r0, #49	; 0x31
 8000aee:	f7ff fd43 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x36);
 8000af2:	2036      	movs	r0, #54	; 0x36
 8000af4:	f7ff fd40 	bl	8000578 <LCD_WriteData>
   LCD_WriteData(0x0F);
 8000af8:	200f      	movs	r0, #15
 8000afa:	f7ff fd3d 	bl	8000578 <LCD_WriteData>

   	//exit sleep
   	LCD_WriteCommand(0x11);
 8000afe:	2011      	movs	r0, #17
 8000b00:	f7ff fd12 	bl	8000528 <LCD_WriteCommand>
   	delay(1000000);
 8000b04:	480f      	ldr	r0, [pc, #60]	; (8000b44 <LCD_Init+0x308>)
 8000b06:	f7ff fcf9 	bl	80004fc <delay>
   	//display on
   	LCD_WriteCommand(0x29);
 8000b0a:	2029      	movs	r0, #41	; 0x29
 8000b0c:	f7ff fd0c 	bl	8000528 <LCD_WriteCommand>
   	delay(1000000);
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LCD_Init+0x308>)
 8000b12:	f7ff fcf3 	bl	80004fc <delay>

    LCD_WriteCommand(0x36);    //Set MADCTL
 8000b16:	2036      	movs	r0, #54	; 0x36
 8000b18:	f7ff fd06 	bl	8000528 <LCD_WriteCommand>
    LCD_WriteData(0x44);
 8000b1c:	2044      	movs	r0, #68	; 0x44
 8000b1e:	f7ff fd2b 	bl	8000578 <LCD_WriteData>

    LCD_WriteCommand(0x20);    //inversion off
 8000b22:	2020      	movs	r0, #32
 8000b24:	f7ff fd00 	bl	8000528 <LCD_WriteCommand>

   	LCD_WriteCommand(0x13);    //lcd normal mode on
 8000b28:	2013      	movs	r0, #19
 8000b2a:	f7ff fcfd 	bl	8000528 <LCD_WriteCommand>
	//GPIOA->BSRR |= (1 << 0);

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	000186a0 	.word	0x000186a0
 8000b44:	000f4240 	.word	0x000f4240

08000b48 <LCD_WriteChar>:
////
////    ILI9341_Unselect();
////}
////
void LCD_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t colour, uint16_t bgcolour)
{
 8000b48:	b082      	sub	sp, #8
 8000b4a:	b590      	push	{r4, r7, lr}
 8000b4c:	b087      	sub	sp, #28
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    LCD_SetAddress(x, y, x+font.width-1, y+font.height-1);
 8000b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	b29c      	uxth	r4, r3
 8000b6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	88b9      	ldrh	r1, [r7, #4]
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	4622      	mov	r2, r4
 8000b84:	f7ff fd2f 	bl	80005e6 <LCD_SetAddress>

    for(i = 0; i < font.height; i++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e02d      	b.n	8000bea <LCD_WriteChar+0xa2>
        b = font.data[(ch - 32) * font.height + i];
 8000b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	3b20      	subs	r3, #32
 8000b94:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8000b98:	fb01 f303 	mul.w	r3, r1, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
        for(j = 0; j < font.width; j++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	e013      	b.n	8000bd8 <LCD_WriteChar+0x90>
            if((b << j) & 0x8000)  {
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <LCD_WriteChar+0x82>
            	LCD_SendColour(colour);
 8000bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fcfa 	bl	80005bc <LCD_SendColour>
 8000bc8:	e003      	b.n	8000bd2 <LCD_WriteChar+0x8a>
            } else {
            	LCD_SendColour(bgcolour);
 8000bca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcf5 	bl	80005bc <LCD_SendColour>
        for(j = 0; j < font.width; j++) {
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bdc:	461a      	mov	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d3e5      	bcc.n	8000bb0 <LCD_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000bee:	461a      	mov	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d3cb      	bcc.n	8000b8e <LCD_WriteChar+0x46>
            }
        }
    }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000c02:	b002      	add	sp, #8
 8000c04:	4770      	bx	lr

08000c06 <LCD_WriteString>:

void LCD_WriteString(uint16_t x, uint16_t y, char *str, FontDef font, uint16_t colour, uint16_t bgcolour)
{
 8000c06:	b082      	sub	sp, #8
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	603a      	str	r2, [r7, #0]
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
 8000c16:	460b      	mov	r3, r1
 8000c18:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 8000c1a:	e02e      	b.n	8000c7a <LCD_WriteString+0x74>
        if(x + font.width >= LCD_WIDTH) {
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	7d3a      	ldrb	r2, [r7, #20]
 8000c20:	4413      	add	r3, r2
 8000c22:	2bef      	cmp	r3, #239	; 0xef
 8000c24:	dd14      	ble.n	8000c50 <LCD_WriteString+0x4a>
            x = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000c2a:	7d7b      	ldrb	r3, [r7, #21]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= LCD_HEIGHT) {
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	7d7a      	ldrb	r2, [r7, #21]
 8000c38:	4413      	add	r3, r2
 8000c3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c3e:	da21      	bge.n	8000c84 <LCD_WriteString+0x7e>
                break;
            }

            if(*str == ' ') {
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	d103      	bne.n	8000c50 <LCD_WriteString+0x4a>
                // skip spaces in the beginning of the new line
                str++;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	603b      	str	r3, [r7, #0]
                continue;
 8000c4e:	e014      	b.n	8000c7a <LCD_WriteString+0x74>
            }
        }

        LCD_WriteChar(x, y, *str, font, colour, bgcolour);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	88b9      	ldrh	r1, [r7, #4]
 8000c56:	88f8      	ldrh	r0, [r7, #6]
 8000c58:	8c3b      	ldrh	r3, [r7, #32]
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	8bbb      	ldrh	r3, [r7, #28]
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f7ff ff6f 	bl	8000b48 <LCD_WriteChar>
        x += font.width;
 8000c6a:	7d3b      	ldrb	r3, [r7, #20]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4413      	add	r3, r2
 8000c72:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1cc      	bne.n	8000c1c <LCD_WriteString+0x16>
    }
}
 8000c82:	e000      	b.n	8000c86 <LCD_WriteString+0x80>
                break;
 8000c84:	bf00      	nop
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c90:	b002      	add	sp, #8
 8000c92:	4770      	bx	lr

08000c94 <main>:
#include "GameInput.h"

tetris_matrix_t test_matrix[MATRIX_ROWS][MATRIX_COLUMNS];

int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	// Initialize the required peripherials
	SPI1_Init();
 8000c9a:	f000 fa41 	bl	8001120 <SPI1_Init>
	LCD_Init();
 8000c9e:	f7ff fdcd 	bl	800083c <LCD_Init>
	FG_Init();
 8000ca2:	f7ff fbf1 	bl	8000488 <FG_Init>
	Init_JoyStick();
 8000ca6:	f7ff faed 	bl	8000284 <Init_JoyStick>
	Init_Timer2();	// User Timer 2 to generate a ISR every 20ms
 8000caa:	f7ff fb79 	bl	80003a0 <Init_Timer2>
	NRF_Init();
 8000cae:	f000 f885 	bl	8000dbc <NRF_Init>

	// Setup the nrf module for transmission
	NRF_OpenWritingPipe();
 8000cb2:	f000 f959 	bl	8000f68 <NRF_OpenWritingPipe>
	NRF_StopListening();
 8000cb6:	f000 f97f 	bl	8000fb8 <NRF_StopListening>
	/*
	 * create a variable to store the direction input given by the user and
	 * later send over the nrf channel
	 */

	char x = 'p';
 8000cba:	2370      	movs	r3, #112	; 0x70
 8000cbc:	70fb      	strb	r3, [r7, #3]

	while (1)
	{
		if(Timer2_flag){
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <main+0x5c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <main+0x3a>
			x = get_dir();
 8000cc6:	f7ff fa87 	bl	80001d8 <get_dir>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	70fb      	strb	r3, [r7, #3]

		/*
		 * Sending the latest direction data over nrf channel and waiting for
		 * some time before sending the next data.
		 */
		NRF_SendData(&x,14);
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	210e      	movs	r1, #14
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f9b8 	bl	8001048 <NRF_SendData>
		for(int i = 0; i < 1000;i++);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	e002      	b.n	8000ce4 <main+0x50>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	dbf8      	blt.n	8000cde <main+0x4a>
		if(Timer2_flag){
 8000cec:	e7e7      	b.n	8000cbe <main+0x2a>
 8000cee:	bf00      	nop
 8000cf0:	20000044 	.word	0x20000044

08000cf4 <NRF_Write>:
#define RF_PWR_HIGH 2

uint8_t addressWidth = 5;

void NRF_Write(uint8_t reg, uint8_t* buf, uint8_t len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]

	NRF_CSN_RESET;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <NRF_Write+0x58>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <NRF_Write+0x58>)
 8000d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0e:	6193      	str	r3, [r2, #24]

	SPI2_SendData(W_REGISTER | reg);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 faf7 	bl	800130c <SPI2_SendData>

    while (len--)
 8000d1e:	e006      	b.n	8000d2e <NRF_Write+0x3a>
    {
    	SPI2_SendData(*buf++);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	603a      	str	r2, [r7, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 faef 	bl	800130c <SPI2_SendData>
    while (len--)
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	71ba      	strb	r2, [r7, #6]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f3      	bne.n	8000d20 <NRF_Write+0x2c>
    }

    NRF_CSN_SET;
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <NRF_Write+0x58>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <NRF_Write+0x58>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	6193      	str	r3, [r2, #24]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020400 	.word	0x40020400

08000d50 <NRF_Read>:
uint8_t NRF_Read(uint8_t reg)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]

	NRF_CSN_RESET;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <NRF_Read+0x3c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <NRF_Read+0x3c>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6193      	str	r3, [r2, #24]


	SPI2_SendData(R_REGISTER | reg);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 facf 	bl	800130c <SPI2_SendData>
	uint8_t result = SPI2_GetData();
 8000d6e:	f000 fadf 	bl	8001330 <SPI2_GetData>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]

    NRF_CSN_SET;
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <NRF_Read+0x3c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <NRF_Read+0x3c>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6193      	str	r3, [r2, #24]

    return result;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020400 	.word	0x40020400

08000d90 <delay_iter>:
void delay_iter(unsigned int iter)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	for(int i =0 ; i <iter;i++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e002      	b.n	8000da4 <delay_iter+0x14>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f8      	bhi.n	8000d9e <delay_iter+0xe>
		;
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <NRF_Init>:
volatile uint8_t config = 0;
uint8_t pipe0_reading_address[5];
void NRF_Init()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000dc2:	4b65      	ldr	r3, [pc, #404]	; (8000f58 <NRF_Init+0x19c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a64      	ldr	r2, [pc, #400]	; (8000f58 <NRF_Init+0x19c>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB->MODER  &= ~(0x3 << (0));
 8000dce:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <NRF_Init+0x1a0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a62      	ldr	r2, [pc, #392]	; (8000f5c <NRF_Init+0x1a0>)
 8000dd4:	f023 0303 	bic.w	r3, r3, #3
 8000dd8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  (0x1 << (0));
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <NRF_Init+0x1a0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a5f      	ldr	r2, [pc, #380]	; (8000f5c <NRF_Init+0x1a0>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1 << 0);
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <NRF_Init+0x1a0>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4a5c      	ldr	r2, [pc, #368]	; (8000f5c <NRF_Init+0x1a0>)
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
	GPIOB->MODER  &= ~(0x3 << (2));
 8000df2:	4b5a      	ldr	r3, [pc, #360]	; (8000f5c <NRF_Init+0x1a0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a59      	ldr	r2, [pc, #356]	; (8000f5c <NRF_Init+0x1a0>)
 8000df8:	f023 030c 	bic.w	r3, r3, #12
 8000dfc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  (0x1 << (2));
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <NRF_Init+0x1a0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a56      	ldr	r2, [pc, #344]	; (8000f5c <NRF_Init+0x1a0>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1 << 1);
 8000e0a:	4b54      	ldr	r3, [pc, #336]	; (8000f5c <NRF_Init+0x1a0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <NRF_Init+0x1a0>)
 8000e10:	f023 0302 	bic.w	r3, r3, #2
 8000e14:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= ( (2 << 0)| (2 << 2));
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <NRF_Init+0x1a0>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <NRF_Init+0x1a0>)
 8000e1c:	f043 030a 	orr.w	r3, r3, #10
 8000e20:	6093      	str	r3, [r2, #8]

	NRF_CE_RESET;
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <NRF_Init+0x1a0>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <NRF_Init+0x1a0>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6193      	str	r3, [r2, #24]
	NRF_CSN_SET;
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <NRF_Init+0x1a0>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <NRF_Init+0x1a0>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6193      	str	r3, [r2, #24]

	SPI2_Init();
 8000e3a:	f000 f9e5 	bl	8001208 <SPI2_Init>

	uint8_t val;
	delay_iter(1000000);
 8000e3e:	4848      	ldr	r0, [pc, #288]	; (8000f60 <NRF_Init+0x1a4>)
 8000e40:	f7ff ffa6 	bl	8000d90 <delay_iter>
	//retries
	val = (uint8_t)((5) << ARD | (15));
 8000e44:	235f      	movs	r3, #95	; 0x5f
 8000e46:	71bb      	strb	r3, [r7, #6]
	NRF_Write(SETUP_RETR,&val ,1);
 8000e48:	1dbb      	adds	r3, r7, #6
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2004      	movs	r0, #4
 8000e50:	f7ff ff50 	bl	8000cf4 <NRF_Write>

	//set data rate
	//val = NRF_Read(RF_SETUP);
	val = 0x06;
 8000e54:	2306      	movs	r3, #6
 8000e56:	71bb      	strb	r3, [r7, #6]
	NRF_Write(RF_SETUP,&val,1);
 8000e58:	1dbb      	adds	r3, r7, #6
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f7ff ff48 	bl	8000cf4 <NRF_Write>

	//features
	val = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71bb      	strb	r3, [r7, #6]
	NRF_Write(FEATURE,&val,1);
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f7ff ff40 	bl	8000cf4 <NRF_Write>

	//dynamic payload
	val = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	71bb      	strb	r3, [r7, #6]
	NRF_Write(DYNPD,&val,1);
 8000e78:	1dbb      	adds	r3, r7, #6
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	201c      	movs	r0, #28
 8000e80:	f7ff ff38 	bl	8000cf4 <NRF_Write>

	val = 0x3F;
 8000e84:	233f      	movs	r3, #63	; 0x3f
 8000e86:	71bb      	strb	r3, [r7, #6]
    NRF_Write(EN_AA, &val,1);  // enable auto-ack on all pipes
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f7ff ff30 	bl	8000cf4 <NRF_Write>

    val = 3;
 8000e94:	2303      	movs	r3, #3
 8000e96:	71bb      	strb	r3, [r7, #6]
    NRF_Write(EN_RXADDR,&val,1); // only open RX pipes 0 & 1
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f7ff ff28 	bl	8000cf4 <NRF_Write>

    // write static payload size setting for all pipes
    val = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < 6; ++i)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	e00a      	b.n	8000ec4 <NRF_Init+0x108>
    {
        NRF_Write((uint8_t)(RX_PW_P0 + i), &val, 1);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3311      	adds	r3, #17
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	1db9      	adds	r1, r7, #6
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff1b 	bl	8000cf4 <NRF_Write>
    for (uint8_t i = 0; i < 6; ++i)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d9f1      	bls.n	8000eae <NRF_Init+0xf2>
    }

    //setup address width as 5 bytes
    val = 3;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	71bb      	strb	r3, [r7, #6]
    NRF_Write(SETUP_AW, &val,1);
 8000ece:	1dbb      	adds	r3, r7, #6
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff ff0d 	bl	8000cf4 <NRF_Write>

    //set channel
    val = 76;
 8000eda:	234c      	movs	r3, #76	; 0x4c
 8000edc:	71bb      	strb	r3, [r7, #6]
    NRF_Write(RF_CH, &val, 1);
 8000ede:	1dbb      	adds	r3, r7, #6
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f7ff ff05 	bl	8000cf4 <NRF_Write>

    // Reset current status
    // Notice reset and flush is the last thing we do
    val = 0x70;
 8000eea:	2370      	movs	r3, #112	; 0x70
 8000eec:	71bb      	strb	r3, [r7, #6]
    NRF_Write(NRF_STATUS, &val ,1);
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2007      	movs	r0, #7
 8000ef6:	f7ff fefd 	bl	8000cf4 <NRF_Write>

    //flush rx and tx
    val = RF24_NOP;
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	71bb      	strb	r3, [r7, #6]
    NRF_Write(FLUSH_RX,&val,1);
 8000efe:	1dbb      	adds	r3, r7, #6
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	20e2      	movs	r0, #226	; 0xe2
 8000f06:	f7ff fef5 	bl	8000cf4 <NRF_Write>
    NRF_Write(FLUSH_TX,&val,1);
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	20e1      	movs	r0, #225	; 0xe1
 8000f12:	f7ff feef 	bl	8000cf4 <NRF_Write>

    //enable 2 bytes crc
    val = 0x0C; //00001100
 8000f16:	230c      	movs	r3, #12
 8000f18:	71bb      	strb	r3, [r7, #6]
    NRF_Write(NRF_CONFIG,&val,1);
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fee7 	bl	8000cf4 <NRF_Write>

    //powerup
    val |= 0x02;
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	71bb      	strb	r3, [r7, #6]
    NRF_Write(NRF_CONFIG,&val,1);
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	2201      	movs	r2, #1
 8000f34:	4619      	mov	r1, r3
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fedc 	bl	8000cf4 <NRF_Write>

    delay_iter(1000000);
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <NRF_Init+0x1a4>)
 8000f3e:	f7ff ff27 	bl	8000d90 <delay_iter>

    config = NRF_Read(NRF_CONFIG);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ff04 	bl	8000d50 <NRF_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <NRF_Init+0x1a8>)
 8000f4e:	701a      	strb	r2, [r3, #0]

}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	000f4240 	.word	0x000f4240
 8000f64:	20000048 	.word	0x20000048

08000f68 <NRF_OpenWritingPipe>:
    val = NRF_Read(RF_SETUP) & (0xF8);
    NRF_Write(RF_SETUP, &val,1);

}
void NRF_OpenWritingPipe()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	NRF_Write(RX_ADDR_P0,addr, addressWidth);
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <NRF_OpenWritingPipe+0x48>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	490f      	ldr	r1, [pc, #60]	; (8000fb4 <NRF_OpenWritingPipe+0x4c>)
 8000f76:	200a      	movs	r0, #10
 8000f78:	f7ff febc 	bl	8000cf4 <NRF_Write>

	NRF_Write(TX_ADDR, addr, addressWidth);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <NRF_OpenWritingPipe+0x48>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <NRF_OpenWritingPipe+0x4c>)
 8000f84:	2010      	movs	r0, #16
 8000f86:	f7ff feb5 	bl	8000cf4 <NRF_Write>

	//set PA level to minimum -18db
    uint8_t val = NRF_Read(RF_SETUP) & (0xF8);
 8000f8a:	2006      	movs	r0, #6
 8000f8c:	f7ff fee0 	bl	8000d50 <NRF_Read>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f023 0307 	bic.w	r3, r3, #7
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	71fb      	strb	r3, [r7, #7]
    NRF_Write(RF_SETUP, &val,1);
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f7ff fea7 	bl	8000cf4 <NRF_Write>

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000010 	.word	0x20000010
 8000fb4:	20000014 	.word	0x20000014

08000fb8 <NRF_StopListening>:
	NRF_CE_SET;

	NRF_Write(RX_ADDR_P0,addr, addressWidth);
}
void NRF_StopListening()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	NRF_CE_RESET;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <NRF_StopListening+0x7c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <NRF_StopListening+0x7c>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6193      	str	r3, [r2, #24]

	delay_iter(1000000);
 8000fca:	481b      	ldr	r0, [pc, #108]	; (8001038 <NRF_StopListening+0x80>)
 8000fcc:	f7ff fee0 	bl	8000d90 <delay_iter>

	config &= ~(1 << PRIM_RX);
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <NRF_StopListening+0x84>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <NRF_StopListening+0x84>)
 8000fde:	701a      	strb	r2, [r3, #0]
	uint8_t val = config;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <NRF_StopListening+0x84>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	71fb      	strb	r3, [r7, #7]
	NRF_Write(NRF_CONFIG,&val,1);
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fe80 	bl	8000cf4 <NRF_Write>

	val = (NRF_Read(EN_RXADDR) | (1 << ERX_P0));
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff feab 	bl	8000d50 <NRF_Read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	71fb      	strb	r3, [r7, #7]
	NRF_Write(EN_RXADDR,&val,1);
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff fe72 	bl	8000cf4 <NRF_Write>
	NRF_CE_SET;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <NRF_StopListening+0x7c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <NRF_StopListening+0x7c>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]

	NRF_Write(RX_ADDR_P0,addr, addressWidth);
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <NRF_StopListening+0x88>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <NRF_StopListening+0x8c>)
 8001024:	200a      	movs	r0, #10
 8001026:	f7ff fe65 	bl	8000cf4 <NRF_Write>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020400 	.word	0x40020400
 8001038:	000f4240 	.word	0x000f4240
 800103c:	20000048 	.word	0x20000048
 8001040:	20000010 	.word	0x20000010
 8001044:	20000014 	.word	0x20000014

08001048 <NRF_SendData>:
    uint8_t val = (1 << RX_DR);
    NRF_Write(NRF_STATUS,&val,1);
}

void NRF_SendData(char* ptr,uint8_t len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	uint8_t blank_len = 32 - len;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f1c3 0320 	rsb	r3, r3, #32
 800105a:	73fb      	strb	r3, [r7, #15]
	NRF_CSN_RESET;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <NRF_SendData+0xd4>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2e      	ldr	r2, [pc, #184]	; (800111c <NRF_SendData+0xd4>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001066:	6193      	str	r3, [r2, #24]
	SPI2_SendData(W_TX_PAYLOAD);
 8001068:	20a0      	movs	r0, #160	; 0xa0
 800106a:	f000 f94f 	bl	800130c <SPI2_SendData>
//    while (len--) {
    	SPI2_SendData(*ptr);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f94a 	bl	800130c <SPI2_SendData>
//    }
//    while (blank_len--) {
//    	SPI2_SendData(0);
//    }
    NRF_CSN_SET;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <NRF_SendData+0xd4>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <NRF_SendData+0xd4>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	6193      	str	r3, [r2, #24]

    NRF_CE_RESET;
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <NRF_SendData+0xd4>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a24      	ldr	r2, [pc, #144]	; (800111c <NRF_SendData+0xd4>)
 800108a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108e:	6193      	str	r3, [r2, #24]
    delay_iter(10000);
 8001090:	f242 7010 	movw	r0, #10000	; 0x2710
 8001094:	f7ff fe7c 	bl	8000d90 <delay_iter>
    NRF_CE_SET;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <NRF_SendData+0xd4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <NRF_SendData+0xd4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6193      	str	r3, [r2, #24]

    uint8_t val = (NRF_Read(NRF_STATUS));
 80010a4:	2007      	movs	r0, #7
 80010a6:	f7ff fe53 	bl	8000d50 <NRF_Read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
//    	val = (NRF_Read(NRF_STATUS));
//    }

//	while(NRF_Read(NRF_STATUS) & 1)
//		;
	NRF_Write(FLUSH_TX,&val,1);
 80010ae:	f107 030e 	add.w	r3, r7, #14
 80010b2:	2201      	movs	r2, #1
 80010b4:	4619      	mov	r1, r3
 80010b6:	20e1      	movs	r0, #225	; 0xe1
 80010b8:	f7ff fe1c 	bl	8000cf4 <NRF_Write>
    if((NRF_Read(NRF_STATUS)) &  1)
 80010bc:	2007      	movs	r0, #7
 80010be:	f7ff fe47 	bl	8000d50 <NRF_Read>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <NRF_SendData+0x98>
	{
    	val = RF24_NOP;
 80010cc:	23ff      	movs	r3, #255	; 0xff
 80010ce:	73bb      	strb	r3, [r7, #14]
		NRF_Write(FLUSH_TX,&val,1);
 80010d0:	f107 030e 	add.w	r3, r7, #14
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	20e1      	movs	r0, #225	; 0xe1
 80010da:	f7ff fe0b 	bl	8000cf4 <NRF_Write>
 80010de:	e010      	b.n	8001102 <NRF_SendData+0xba>
	}
    else if((NRF_Read(NRF_STATUS)) &  (1 << (MAX_RT)))
 80010e0:	2007      	movs	r0, #7
 80010e2:	f7ff fe35 	bl	8000d50 <NRF_Read>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <NRF_SendData+0xba>
	{
    	val = RF24_NOP;
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	73bb      	strb	r3, [r7, #14]
		NRF_Write(FLUSH_TX,&val,1);
 80010f4:	f107 030e 	add.w	r3, r7, #14
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	20e1      	movs	r0, #225	; 0xe1
 80010fe:	f7ff fdf9 	bl	8000cf4 <NRF_Write>
	}

	val = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 8001102:	2370      	movs	r3, #112	; 0x70
 8001104:	73bb      	strb	r3, [r7, #14]
	NRF_Write(NRF_STATUS,&val,1);
 8001106:	f107 030e 	add.w	r3, r7, #14
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	2007      	movs	r0, #7
 8001110:	f7ff fdf0 	bl	8000cf4 <NRF_Write>
//    }
//    else
//    {
//      return (TRANSMIT_FAIL);            /TX FIFO full or wrong mode/
//    }
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020400 	.word	0x40020400

08001120 <SPI1_Init>:
#include "stm32f4xx_hal.h"
#include "spi.h"
#include <stdint.h>

void SPI1_Init()
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	// Enable clock for SPI1
	(RCC->APB2ENR) |= RCC_APB2ENR_SPI1EN;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <SPI1_Init+0x78>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <SPI1_Init+0x78>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SPI1_Init+0x78>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <SPI1_Init+0x78>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~ (GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7);  // Configure PA2 as Alternative Function.
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <SPI1_Init+0x7c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <SPI1_Init+0x7c>)
 8001142:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001146:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1);
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <SPI1_Init+0x7c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <SPI1_Init+0x7c>)
 800114e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8001152:	6013      	str	r3, [r2, #0]
	// See pg 149 of ST RM0383 document.  SPI1 is AF5.  And pg 160 of the same document shows
	// alternate function for pin 5 = bits 20-23, pin 6 = bits 24-27, pin 7 = bits 28-31.
	// We set these to 5.
	GPIOA->AFR[0] |= ((5 << 20) | (5 << 24) | (5 << 28));
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <SPI1_Init+0x7c>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <SPI1_Init+0x7c>)
 800115a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800115e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001162:	6213      	str	r3, [r2, #32]
	GPIOA->OSPEEDR |= ((2 << 10) | (2 << 12) | (2 << 14));
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <SPI1_Init+0x7c>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <SPI1_Init+0x7c>)
 800116a:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800116e:	6093      	str	r3, [r2, #8]
	// Set Bit 0: The second clock transition is the first data capture edge
	// Set Bit 1: CK to 1 when idle
	// Set Bit 2: The STM32 is the master, the gyro is the slave
	// Set Bits 3-5 to 010 for a baud rate of fPCLK/8
	// Set Bits 8-9: Software slave management enabled, Internal slave select to 1
	(SPI1->CR1) |= (1 | (1 << 1) | (1 << 2) | (0 << 3) | (1 << 8) | (1 << 9));
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <SPI1_Init+0x80>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SPI1_Init+0x80>)
 8001176:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800117a:	f043 0303 	orr.w	r3, r3, #3
 800117e:	6013      	str	r3, [r2, #0]
	// Set Bit 6: Enable SPI.  See page 603.
	(SPI1->CR1) |= (1 << 6);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <SPI1_Init+0x80>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <SPI1_Init+0x80>)
 8001186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40013000 	.word	0x40013000

080011a4 <WaitForSPI1TXReady>:
	while (!((SPI1->SR) &(1<<0))){};  // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty

}

void WaitForSPI1TXReady()
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
/*During discontinuous communications, there is a 2 APB clock period delay between the
write operation to the SPI_DR register and BSY bit setting. As a consequence it is
mandatory to wait first until TXE is set and then until BSY is cleared after writing the last
data.
*/
	while (!((SPI1->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 80011aa:	bf00      	nop
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <WaitForSPI1TXReady+0x3c>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f9      	beq.n	80011ac <WaitForSPI1TXReady+0x8>
	while (((SPI1->SR)&(1<<7))) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 80011b8:	bf00      	nop
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <WaitForSPI1TXReady+0x3c>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <WaitForSPI1TXReady+0x16>

	//  Clear the Overrun flag by reading DR and SR
	uint8_t temp = SPI1->DR;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <WaitForSPI1TXReady+0x3c>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	71fb      	strb	r3, [r7, #7]
	temp = SPI1->SR;
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <WaitForSPI1TXReady+0x3c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	71fb      	strb	r3, [r7, #7]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40013000 	.word	0x40013000

080011e4 <SPI1_SendData>:
void SPI1_SendData(unsigned char data)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	WaitForSPI1TXReady();
 80011ee:	f7ff ffd9 	bl	80011a4 <WaitForSPI1TXReady>
	SPI1->DR = data;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <SPI1_SendData+0x20>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	60d3      	str	r3, [r2, #12]
	WaitForSPI1TXReady();
 80011f8:	f7ff ffd4 	bl	80011a4 <WaitForSPI1TXReady>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000

08001208 <SPI2_Init>:
	WaitForSPI1RXReady();
	return (SPI1->DR);  // I believe we need this simply because a read must follow a write
}

void SPI2_Init()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	// Enable clock for SPI1
	(RCC->APB1ENR) |= RCC_APB1ENR_SPI2EN;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <SPI2_Init+0x80>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <SPI2_Init+0x80>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <SPI2_Init+0x80>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <SPI2_Init+0x80>)
 800121e:	f043 0302 	orr.w	r3, r3, #2
 8001222:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~ (GPIO_MODER_MODER13 | GPIO_MODER_MODER14 | GPIO_MODER_MODER15);  // Configure PA2 as Alternative Function.
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <SPI2_Init+0x84>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a18      	ldr	r2, [pc, #96]	; (800128c <SPI2_Init+0x84>)
 800122a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800122e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER13_1 | GPIO_MODER_MODER14_1 | GPIO_MODER_MODER15_1);
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <SPI2_Init+0x84>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <SPI2_Init+0x84>)
 8001236:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 800123a:	6013      	str	r3, [r2, #0]
	// See pg 149 of ST RM0383 document.  SPI1 is AF5.  And pg 160 of the same document shows
	// alternate function for pin 5 = bits 20-23, pin 6 = bits 24-27, pin 7 = bits 28-31.
	// We set these to 5.
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <SPI2_Init+0x84>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <SPI2_Init+0x84>)
 8001242:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001246:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800124a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->OSPEEDR |= ((2 << 26) | (2 << 28) | (2 << 30));
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <SPI2_Init+0x84>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <SPI2_Init+0x84>)
 8001252:	f043 4328 	orr.w	r3, r3, #2818572288	; 0xa8000000
 8001256:	6093      	str	r3, [r2, #8]
	// reSet Bit 0: The second clock transition is the first data capture edge
	// reSet Bit 1: CK to 1 when idle
	// Set Bit 2: The STM32 is the master, the gyro is the slave
	// Set Bits 3-5 to 010 for a baud rate of fPCLK/8
	// Set Bits 8-9: Software slave management enabled, Internal slave select to 1
	(SPI2->CR1) &= ~(1 | (1 << 1));
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <SPI2_Init+0x88>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <SPI2_Init+0x88>)
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	6013      	str	r3, [r2, #0]
	(SPI2->CR1) |=  (1 << 2) | (3 << 3) | (1 << 8) | (1 << 9);
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <SPI2_Init+0x88>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <SPI2_Init+0x88>)
 800126a:	f443 7347 	orr.w	r3, r3, #796	; 0x31c
 800126e:	6013      	str	r3, [r2, #0]
	// Set Bit 6: Enable SPI.  See page 603.
	(SPI2->CR1) |= (1 << 6);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <SPI2_Init+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <SPI2_Init+0x88>)
 8001276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400
 8001290:	40003800 	.word	0x40003800

08001294 <SPI2_WaitForRXReady>:
void SPI2_WaitForRXReady()
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
//	while(((SPI1->SR & 0x01) == 0) || ((SPI1->SR & 0x80) == 0x80))
//		;
//	while((SPI1->SR & 0x01) == 0)
//		;

	while (((SPI2->SR)&(1<<7))) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 8001298:	bf00      	nop
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <SPI2_WaitForRXReady+0x34>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <SPI2_WaitForRXReady+0x6>
	SPI2->DR = 0;  // send dummy data
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SPI2_WaitForRXReady+0x34>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
	while (!((SPI2->SR) &(1<<0))){};  // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 80012ac:	bf00      	nop
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SPI2_WaitForRXReady+0x34>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f9      	beq.n	80012ae <SPI2_WaitForRXReady+0x1a>

}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40003800 	.word	0x40003800

080012cc <SPI2_WaitForTXReady>:

void SPI2_WaitForTXReady()
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
/*During discontinuous communications, there is a 2 APB clock period delay between the
write operation to the SPI_DR register and BSY bit setting. As a consequence it is
mandatory to wait first until TXE is set and then until BSY is cleared after writing the last
data.
*/
	while (!((SPI2->SR)&(1<<1))) {};  // wait for TXE bit to set -> This will indicate that the buffer is empty
 80012d2:	bf00      	nop
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <SPI2_WaitForTXReady+0x3c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <SPI2_WaitForTXReady+0x8>
	while (((SPI2->SR)&(1<<7))) {};  // wait for BSY bit to Reset -> This will indicate that SPI is not busy in communication
 80012e0:	bf00      	nop
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <SPI2_WaitForTXReady+0x3c>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <SPI2_WaitForTXReady+0x16>

	//  Clear the Overrun flag by reading DR and SR
	uint8_t temp = SPI2->DR;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SPI2_WaitForTXReady+0x3c>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	71fb      	strb	r3, [r7, #7]
	temp = SPI2->SR;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SPI2_WaitForTXReady+0x3c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	71fb      	strb	r3, [r7, #7]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40003800 	.word	0x40003800

0800130c <SPI2_SendData>:
void SPI2_SendData(unsigned char data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	SPI2_WaitForTXReady();
 8001316:	f7ff ffd9 	bl	80012cc <SPI2_WaitForTXReady>
	SPI2->DR = data;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <SPI2_SendData+0x20>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	60d3      	str	r3, [r2, #12]
	SPI2_WaitForTXReady();
 8001320:	f7ff ffd4 	bl	80012cc <SPI2_WaitForTXReady>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40003800 	.word	0x40003800

08001330 <SPI2_GetData>:
unsigned char SPI2_GetData()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	SPI2_WaitForRXReady();
 8001334:	f7ff ffae 	bl	8001294 <SPI2_WaitForRXReady>
	return (SPI2->DR);  // I believe we need this simply because a read must follow a write
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <SPI2_GetData+0x14>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40003800 	.word	0x40003800

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f848 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <OTG_FS_IRQHandler+0x10>)
 80013a2:	f000 f855 	bl	8001450 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000050 	.word	0x20000050

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ffd7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f001 fd63 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fc45 	bl	8000c94 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001418:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 800141c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001420:	20000354 	.word	0x20000354

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000001a 	.word	0x2000001a
 800144c:	2000004c 	.word	0x2000004c

08001450 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fa0f 	bl	800288a <USB_GetMode>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	f040 80f6 	bne.w	8001660 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f001 f9f3 	bl	8002864 <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80ec 	beq.w	800165e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f9ea 	bl	8002864 <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800149a:	d104      	bne.n	80014a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f9da 	bl	8002864 <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ba:	d104      	bne.n	80014c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f9ca 	bl	8002864 <USB_ReadInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014da:	d104      	bne.n	80014e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 f9ba 	bl	8002864 <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d103      	bne.n	8001502 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2202      	movs	r2, #2
 8001500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f001 f9ac 	bl	8002864 <USB_ReadInterrupts>
 800150c:	4603      	mov	r3, r0
 800150e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001516:	d11c      	bne.n	8001552 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001520:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001532:	2110      	movs	r1, #16
 8001534:	6938      	ldr	r0, [r7, #16]
 8001536:	f001 f8d9 	bl	80026ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800153a:	6938      	ldr	r0, [r7, #16]
 800153c:	f001 f90a 	bl	8002754 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f001 f9ad 	bl	80028a6 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 fc3e 	bl	8002dce <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f984 	bl	8002864 <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001566:	d102      	bne.n	800156e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f001 f829 	bl	80025c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f976 	bl	8002864 <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b08      	cmp	r3, #8
 8001580:	d106      	bne.n	8001590 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f001 fc07 	bl	8002d96 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2208      	movs	r2, #8
 800158e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f965 	bl	8002864 <USB_ReadInterrupts>
 800159a:	4603      	mov	r3, r0
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	d101      	bne.n	80015a8 <HAL_HCD_IRQHandler+0x158>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_HCD_IRQHandler+0x15a>
 80015a8:	2300      	movs	r3, #0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d012      	beq.n	80015d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0210 	bic.w	r2, r2, #16
 80015bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 ff2c 	bl	800241c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0210 	orr.w	r2, r2, #16
 80015d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 f943 	bl	8002864 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015e8:	d13a      	bne.n	8001660 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f993 	bl	800291a <USB_HC_ReadInterrupt>
 80015f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e025      	b.n	8001648 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d018      	beq.n	8001642 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4413      	add	r3, r2
 8001618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001626:	d106      	bne.n	8001636 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f836 	bl	80016a0 <HCD_HC_IN_IRQHandler>
 8001634:	e005      	b.n	8001642 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fb84 	bl	8001d4a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3d4      	bcc.n	80015fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	e000      	b.n	8001660 <HAL_HCD_IRQHandler+0x210>
      return;
 800165e:	bf00      	nop
    }
  }
}
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_HCD_Stop+0x16>
 8001678:	2302      	movs	r3, #2
 800167a:	e00d      	b.n	8001698 <HAL_HCD_Stop+0x32>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f001 fa53 	bl	8002b34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d11a      	bne.n	8001706 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016dc:	461a      	mov	r2, r3
 80016de:	2304      	movs	r3, #4
 80016e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	3361      	adds	r3, #97	; 0x61
 80016f0:	2206      	movs	r2, #6
 80016f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 f91c 	bl	800293c <USB_HC_Halt>
 8001704:	e0af      	b.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171c:	d11b      	bne.n	8001756 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172a:	461a      	mov	r2, r3
 800172c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001730:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	3361      	adds	r3, #97	; 0x61
 8001740:	2207      	movs	r2, #7
 8001742:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f001 f8f4 	bl	800293c <USB_HC_Halt>
 8001754:	e087      	b.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d109      	bne.n	8001780 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4413      	add	r3, r2
 8001774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001778:	461a      	mov	r2, r3
 800177a:	2320      	movs	r3, #32
 800177c:	6093      	str	r3, [r2, #8]
 800177e:	e072      	b.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11a      	bne.n	80017cc <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	461a      	mov	r2, r3
 80017a4:	2308      	movs	r3, #8
 80017a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	3361      	adds	r3, #97	; 0x61
 80017b6:	2205      	movs	r2, #5
 80017b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f8b9 	bl	800293c <USB_HC_Halt>
 80017ca:	e04c      	b.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d11b      	bne.n	800181c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f0:	461a      	mov	r2, r3
 80017f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	3361      	adds	r3, #97	; 0x61
 8001806:	2208      	movs	r2, #8
 8001808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f001 f891 	bl	800293c <USB_HC_Halt>
 800181a:	e024      	b.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4413      	add	r3, r2
 8001824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d119      	bne.n	8001866 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183e:	461a      	mov	r2, r3
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3361      	adds	r3, #97	; 0x61
 8001852:	2206      	movs	r2, #6
 8001854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f86b 	bl	800293c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4413      	add	r3, r2
 800186e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d112      	bne.n	80018a4 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f001 f857 	bl	800293c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4413      	add	r3, r2
 8001896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189a:	461a      	mov	r2, r3
 800189c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80018a2:	e24e      	b.n	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 80df 	bne.w	8001a7a <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d019      	beq.n	80018f8 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3348      	adds	r3, #72	; 0x48
 80018d2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0159      	lsls	r1, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	440b      	add	r3, r1
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	202c      	movs	r0, #44	; 0x2c
 80018ee:	fb00 f303 	mul.w	r3, r0, r3
 80018f2:	440b      	add	r3, r1
 80018f4:	3350      	adds	r3, #80	; 0x50
 80018f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3361      	adds	r3, #97	; 0x61
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	212c      	movs	r1, #44	; 0x2c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	335c      	adds	r3, #92	; 0x5c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	015a      	lsls	r2, r3, #5
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4413      	add	r3, r2
 8001924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001928:	461a      	mov	r2, r3
 800192a:	2301      	movs	r3, #1
 800192c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	333f      	adds	r3, #63	; 0x3f
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	333f      	adds	r3, #63	; 0x3f
 8001950:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001952:	2b02      	cmp	r3, #2
 8001954:	d111      	bne.n	800197a <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f000 ffeb 	bl	800293c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4413      	add	r3, r2
 800196e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001972:	461a      	mov	r2, r3
 8001974:	2310      	movs	r3, #16
 8001976:	6093      	str	r3, [r2, #8]
 8001978:	e03a      	b.n	80019f0 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	333f      	adds	r3, #63	; 0x3f
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d009      	beq.n	80019a2 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	333f      	adds	r3, #63	; 0x3f
 800199c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d126      	bne.n	80019f0 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3360      	adds	r3, #96	; 0x60
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	b2d9      	uxtb	r1, r3
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	202c      	movs	r0, #44	; 0x2c
 80019de:	fb00 f303 	mul.w	r3, r0, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f001 f9fd 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d12b      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3348      	adds	r3, #72	; 0x48
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	202c      	movs	r0, #44	; 0x2c
 8001a0e:	fb00 f202 	mul.w	r2, r0, r2
 8001a12:	440a      	add	r2, r1
 8001a14:	3240      	adds	r2, #64	; 0x40
 8001a16:	8812      	ldrh	r2, [r2, #0]
 8001a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 818e 	beq.w	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3354      	adds	r3, #84	; 0x54
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2d8      	uxtb	r0, r3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3354      	adds	r3, #84	; 0x54
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	701a      	strb	r2, [r3, #0]
}
 8001a4e:	e178      	b.n	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3354      	adds	r3, #84	; 0x54
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f083 0301 	eor.w	r3, r3, #1
 8001a64:	b2d8      	uxtb	r0, r3
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3354      	adds	r3, #84	; 0x54
 8001a74:	4602      	mov	r2, r0
 8001a76:	701a      	strb	r2, [r3, #0]
}
 8001a78:	e163      	b.n	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80f6 	bne.w	8001c7e <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3361      	adds	r3, #97	; 0x61
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d109      	bne.n	8001aba <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3360      	adds	r3, #96	; 0x60
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e0c9      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3361      	adds	r3, #97	; 0x61
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d109      	bne.n	8001ae2 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3360      	adds	r3, #96	; 0x60
 8001adc:	2205      	movs	r2, #5
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	e0b5      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3361      	adds	r3, #97	; 0x61
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d009      	beq.n	8001b0a <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3361      	adds	r3, #97	; 0x61
 8001b04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d150      	bne.n	8001bac <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	335c      	adds	r3, #92	; 0x5c
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	202c      	movs	r0, #44	; 0x2c
 8001b22:	fb00 f303 	mul.w	r3, r0, r3
 8001b26:	440b      	add	r3, r1
 8001b28:	335c      	adds	r3, #92	; 0x5c
 8001b2a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	335c      	adds	r3, #92	; 0x5c
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d912      	bls.n	8001b66 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	335c      	adds	r3, #92	; 0x5c
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3360      	adds	r3, #96	; 0x60
 8001b60:	2204      	movs	r2, #4
 8001b62:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b64:	e073      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3360      	adds	r3, #96	; 0x60
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b8e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b96:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001baa:	e050      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3361      	adds	r3, #97	; 0x61
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d122      	bne.n	8001c06 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001be8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e023      	b.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3361      	adds	r3, #97	; 0x61
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d119      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	335c      	adds	r3, #92	; 0x5c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	440b      	add	r3, r1
 8001c38:	335c      	adds	r3, #92	; 0x5c
 8001c3a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	b2d9      	uxtb	r1, r3
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	202c      	movs	r0, #44	; 0x2c
 8001c6a:	fb00 f303 	mul.w	r3, r0, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3360      	adds	r3, #96	; 0x60
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 f8b7 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c7c:	e061      	b.n	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d156      	bne.n	8001d42 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	333f      	adds	r3, #63	; 0x3f
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d111      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	335c      	adds	r3, #92	; 0x5c
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fe39 	bl	800293c <USB_HC_Halt>
 8001cca:	e031      	b.n	8001d30 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	212c      	movs	r1, #44	; 0x2c
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	333f      	adds	r3, #63	; 0x3f
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	333f      	adds	r3, #63	; 0x3f
 8001cee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d11d      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	335c      	adds	r3, #92	; 0x5c
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d110      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3361      	adds	r3, #97	; 0x61
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fe06 	bl	800293c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2310      	movs	r3, #16
 8001d40:	6093      	str	r3, [r2, #8]
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b088      	sub	sp, #32
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d11a      	bne.n	8001db0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d86:	461a      	mov	r2, r3
 8001d88:	2304      	movs	r3, #4
 8001d8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3361      	adds	r3, #97	; 0x61
 8001d9a:	2206      	movs	r2, #6
 8001d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fdc7 	bl	800293c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001dae:	e331      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d12e      	bne.n	8001e24 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	333d      	adds	r3, #61	; 0x3d
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	f040 8313 	bne.w	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	333d      	adds	r3, #61	; 0x3d
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fd8d 	bl	800293c <USB_HC_Halt>
}
 8001e22:	e2f7      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3a:	d112      	bne.n	8001e62 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fd6e 	bl	800293c <USB_HC_Halt>
}
 8001e60:	e2d8      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d140      	bne.n	8001efa <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	335c      	adds	r3, #92	; 0x5c
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d111      	bne.n	8001ec4 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	212c      	movs	r1, #44	; 0x2c
 8001ea6:	fb01 f303 	mul.w	r3, r1, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	333d      	adds	r3, #61	; 0x3d
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2340      	movs	r3, #64	; 0x40
 8001ec2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3361      	adds	r3, #97	; 0x61
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fd22 	bl	800293c <USB_HC_Halt>
}
 8001ef8:	e28c      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d12c      	bne.n	8001f6a <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3361      	adds	r3, #97	; 0x61
 8001f1e:	2204      	movs	r2, #4
 8001f20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	333d      	adds	r3, #61	; 0x3d
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	335c      	adds	r3, #92	; 0x5c
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fcf3 	bl	800293c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	6093      	str	r3, [r2, #8]
}
 8001f68:	e254      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d11a      	bne.n	8001fb6 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2308      	movs	r3, #8
 8001f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fcc4 	bl	800293c <USB_HC_Halt>
}
 8001fb4:	e22e      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d140      	bne.n	800204e <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3361      	adds	r3, #97	; 0x61
 8001fec:	2203      	movs	r2, #3
 8001fee:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	333d      	adds	r3, #61	; 0x3d
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d112      	bne.n	800202a <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	333c      	adds	r3, #60	; 0x3c
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	333d      	adds	r3, #61	; 0x3d
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fc81 	bl	800293c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	2310      	movs	r3, #16
 800204a:	6093      	str	r3, [r2, #8]
}
 800204c:	e1e2      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d164      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d111      	bne.n	8002090 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3361      	adds	r3, #97	; 0x61
 800207a:	2206      	movs	r2, #6
 800207c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc57 	bl	800293c <USB_HC_Halt>
 800208e:	e044      	b.n	800211a <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	335c      	adds	r3, #92	; 0x5c
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f303 	mul.w	r3, r0, r3
 80020ac:	440b      	add	r3, r1
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	335c      	adds	r3, #92	; 0x5c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d920      	bls.n	8002108 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	335c      	adds	r3, #92	; 0x5c
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	2204      	movs	r2, #4
 80020e8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	b2d9      	uxtb	r1, r3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	202c      	movs	r0, #44	; 0x2c
 80020f4:	fb00 f303 	mul.w	r3, r0, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3360      	adds	r3, #96	; 0x60
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fe72 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
 8002106:	e008      	b.n	800211a <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3360      	adds	r3, #96	; 0x60
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4413      	add	r3, r2
 8002122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002126:	461a      	mov	r2, r3
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	6093      	str	r3, [r2, #8]
}
 800212c:	e172      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002144:	d11b      	bne.n	800217e <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3361      	adds	r3, #97	; 0x61
 8002154:	2208      	movs	r2, #8
 8002156:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fbea 	bl	800293c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	e14a      	b.n	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	f040 813f 	bne.w	8002414 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3361      	adds	r3, #97	; 0x61
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d17d      	bne.n	80022a6 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3360      	adds	r3, #96	; 0x60
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	333f      	adds	r3, #63	; 0x3f
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d00a      	beq.n	80021e6 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	333f      	adds	r3, #63	; 0x3f
 80021de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	f040 8100 	bne.w	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d113      	bne.n	8002216 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3355      	adds	r3, #85	; 0x55
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3355      	adds	r3, #85	; 0x55
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	f040 80e3 	bne.w	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	334c      	adds	r3, #76	; 0x4c
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80d8 	beq.w	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	334c      	adds	r3, #76	; 0x4c
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	202c      	movs	r0, #44	; 0x2c
 800224c:	fb00 f202 	mul.w	r2, r0, r2
 8002250:	440a      	add	r2, r1
 8002252:	3240      	adds	r2, #64	; 0x40
 8002254:	8812      	ldrh	r2, [r2, #0]
 8002256:	4413      	add	r3, r2
 8002258:	3b01      	subs	r3, #1
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	202c      	movs	r0, #44	; 0x2c
 8002260:	fb00 f202 	mul.w	r2, r0, r2
 8002264:	440a      	add	r2, r1
 8002266:	3240      	adds	r2, #64	; 0x40
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	fbb3 f3f2 	udiv	r3, r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80b5 	beq.w	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3355      	adds	r3, #85	; 0x55
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2d8      	uxtb	r0, r3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3355      	adds	r3, #85	; 0x55
 80022a0:	4602      	mov	r2, r0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e09f      	b.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3361      	adds	r3, #97	; 0x61
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d109      	bne.n	80022ce <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3360      	adds	r3, #96	; 0x60
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e08b      	b.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3361      	adds	r3, #97	; 0x61
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d109      	bne.n	80022f6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3360      	adds	r3, #96	; 0x60
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e077      	b.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3361      	adds	r3, #97	; 0x61
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d109      	bne.n	800231e <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3360      	adds	r3, #96	; 0x60
 8002318:	2205      	movs	r2, #5
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e063      	b.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3361      	adds	r3, #97	; 0x61
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d009      	beq.n	8002346 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3361      	adds	r3, #97	; 0x61
 8002340:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002342:	2b08      	cmp	r3, #8
 8002344:	d14f      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	335c      	adds	r3, #92	; 0x5c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	202c      	movs	r0, #44	; 0x2c
 800235e:	fb00 f303 	mul.w	r3, r0, r3
 8002362:	440b      	add	r3, r1
 8002364:	335c      	adds	r3, #92	; 0x5c
 8002366:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	335c      	adds	r3, #92	; 0x5c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d912      	bls.n	80023a2 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	335c      	adds	r3, #92	; 0x5c
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	2204      	movs	r2, #4
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e021      	b.n	80023e6 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ca:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2302      	movs	r3, #2
 80023f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	b2d9      	uxtb	r1, r3
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	202c      	movs	r0, #44	; 0x2c
 8002402:	fb00 f303 	mul.w	r3, r0, r3
 8002406:	4413      	add	r3, r2
 8002408:	3360      	adds	r3, #96	; 0x60
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fceb 	bl	8002dea <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	0c5b      	lsrs	r3, r3, #17
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002450:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d004      	beq.n	8002462 <HCD_RXQLVL_IRQHandler+0x46>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b05      	cmp	r3, #5
 800245c:	f000 80a9 	beq.w	80025b2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002460:	e0aa      	b.n	80025b8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3344      	adds	r3, #68	; 0x44
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 809b 	beq.w	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3350      	adds	r3, #80	; 0x50
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	441a      	add	r2, r3
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	440b      	add	r3, r1
 80024a0:	334c      	adds	r3, #76	; 0x4c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d87a      	bhi.n	800259e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3344      	adds	r3, #68	; 0x44
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	b292      	uxth	r2, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f000 f977 	bl	80027b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3344      	adds	r3, #68	; 0x44
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	441a      	add	r2, r3
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	202c      	movs	r0, #44	; 0x2c
 80024e0:	fb00 f303 	mul.w	r3, r0, r3
 80024e4:	440b      	add	r3, r1
 80024e6:	3344      	adds	r3, #68	; 0x44
 80024e8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3350      	adds	r3, #80	; 0x50
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	441a      	add	r2, r3
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	202c      	movs	r0, #44	; 0x2c
 8002504:	fb00 f303 	mul.w	r3, r0, r3
 8002508:	440b      	add	r3, r1
 800250a:	3350      	adds	r3, #80	; 0x50
 800250c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	0cdb      	lsrs	r3, r3, #19
 800251e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002522:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3340      	adds	r3, #64	; 0x40
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4293      	cmp	r3, r2
 800253a:	d13c      	bne.n	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d039      	beq.n	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002558:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002560:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3354      	adds	r3, #84	; 0x54
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2d8      	uxtb	r0, r3
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3354      	adds	r3, #84	; 0x54
 8002598:	4602      	mov	r2, r0
 800259a:	701a      	strb	r2, [r3, #0]
      break;
 800259c:	e00b      	b.n	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	2204      	movs	r2, #4
 80025ae:	701a      	strb	r2, [r3, #0]
      break;
 80025b0:	e001      	b.n	80025b6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80025b2:	bf00      	nop
 80025b4:	e000      	b.n	80025b8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80025b6:	bf00      	nop
  }
}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d10b      	bne.n	8002610 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fbd5 	bl	8002db2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d132      	bne.n	8002680 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b04      	cmp	r3, #4
 800262a:	d126      	bne.n	800267a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d113      	bne.n	800265c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800263a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800263e:	d106      	bne.n	800264e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f92d 	bl	80028a6 <USB_InitFSLSPClkSel>
 800264c:	e011      	b.n	8002672 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2101      	movs	r1, #1
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f926 	bl	80028a6 <USB_InitFSLSPClkSel>
 800265a:	e00a      	b.n	8002672 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266a:	461a      	mov	r2, r3
 800266c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002670:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fbc7 	bl	8002e06 <HAL_HCD_PortEnabled_Callback>
 8002678:	e002      	b.n	8002680 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fbd1 	bl	8002e22 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b20      	cmp	r3, #32
 8002688:	d103      	bne.n	8002692 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f043 0320 	orr.w	r3, r3, #32
 8002690:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6013      	str	r3, [r2, #0]
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 0201 	bic.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3301      	adds	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <USB_FlushTxFifo+0x64>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e01b      	b.n	8002744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	daf2      	bge.n	80026fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	019b      	lsls	r3, r3, #6
 800271c:	f043 0220 	orr.w	r2, r3, #32
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3301      	adds	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <USB_FlushTxFifo+0x64>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e006      	b.n	8002744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d0f0      	beq.n	8002724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	00030d40 	.word	0x00030d40

08002754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3301      	adds	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <USB_FlushRxFifo+0x5c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e018      	b.n	80027a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	daf2      	bge.n	8002760 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2210      	movs	r2, #16
 8002782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <USB_FlushRxFifo+0x5c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e006      	b.n	80027a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d0f0      	beq.n	8002784 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	00030d40 	.word	0x00030d40

080027b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08b      	sub	sp, #44	; 0x2c
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	e014      	b.n	800280a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3301      	adds	r3, #1
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3301      	adds	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	3301      	adds	r3, #1
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	6a3a      	ldr	r2, [r7, #32]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	429a      	cmp	r2, r3
 8002810:	d3e6      	bcc.n	80027e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002812:	8bfb      	ldrh	r3, [r7, #30]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01e      	beq.n	8002856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002822:	461a      	mov	r2, r3
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	701a      	strb	r2, [r3, #0]
      i++;
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	3301      	adds	r3, #1
 8002842:	623b      	str	r3, [r7, #32]
      pDest++;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800284a:	8bfb      	ldrh	r3, [r7, #30]
 800284c:	3b01      	subs	r3, #1
 800284e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ea      	bne.n	800282c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002858:	4618      	mov	r0, r3
 800285a:	372c      	adds	r7, #44	; 0x2c
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028c4:	f023 0303 	bic.w	r3, r3, #3
 80028c8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d107      	bne.n	80028f8 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ee:	461a      	mov	r2, r3
 80028f0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80028f4:	6053      	str	r3, [r2, #4]
 80028f6:	e009      	b.n	800290c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d106      	bne.n	800290c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002904:	461a      	mov	r2, r3
 8002906:	f241 7370 	movw	r3, #6000	; 0x1770
 800290a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	b29b      	uxth	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0fdb      	lsrs	r3, r3, #31
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b20      	cmp	r3, #32
 800298a:	d104      	bne.n	8002996 <USB_HC_Halt+0x5a>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e0c8      	b.n	8002b28 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <USB_HC_Halt+0x66>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d163      	bne.n	8002a6a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	0151      	lsls	r1, r2, #5
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	440a      	add	r2, r1
 80029b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029c0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80ab 	bne.w	8002b26 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d133      	bne.n	8002a44 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	0151      	lsls	r1, r2, #5
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	440a      	add	r2, r1
 80029f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029fa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	0151      	lsls	r1, r2, #5
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	440a      	add	r2, r1
 8002a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a28:	d81d      	bhi.n	8002a66 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a40:	d0ec      	beq.n	8002a1c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a42:	e070      	b.n	8002b26 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a64:	e05f      	b.n	8002b26 <USB_HC_Halt+0x1ea>
            break;
 8002a66:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002a68:	e05d      	b.n	8002b26 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a88:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d133      	bne.n	8002b02 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	0151      	lsls	r1, r2, #5
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	0151      	lsls	r1, r2, #5
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	440a      	add	r2, r1
 8002ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ae6:	d81d      	bhi.n	8002b24 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002afe:	d0ec      	beq.n	8002ada <USB_HC_Halt+0x19e>
 8002b00:	e011      	b.n	8002b26 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	0151      	lsls	r1, r2, #5
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	440a      	add	r2, r1
 8002b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e000      	b.n	8002b26 <USB_HC_Halt+0x1ea>
          break;
 8002b24:	bf00      	nop
    }
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3724      	adds	r7, #36	; 0x24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fdbd 	bl	80026c8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b4e:	2110      	movs	r1, #16
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fdcb 	bl	80026ec <USB_FlushTxFifo>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fdf7 	bl	8002754 <USB_FlushRxFifo>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e01f      	b.n	8002bb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002baa:	461a      	mov	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d9dc      	bls.n	8002b76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e034      	b.n	8002c2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002be8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c08:	d80c      	bhi.n	8002c24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c20:	d0ec      	beq.n	8002bfc <USB_StopHost+0xc8>
 8002c22:	e000      	b.n	8002c26 <USB_StopHost+0xf2>
        break;
 8002c24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	d9c7      	bls.n	8002bc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f04f 32ff 	mov.w	r2, #4294967295
 8002c46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fd2c 	bl	80026a6 <USB_EnableGlobalInt>

  return ret;
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f804 	bl	8002c7c <USBH_HandleSof>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b0b      	cmp	r3, #11
 8002c8c:	d10a      	bne.n	8002ca4 <USBH_HandleSof+0x28>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002cbc:	bf00      	nop
}
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002cd8:	bf00      	nop
}
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f883 	bl	8002e3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f80b 	bl	8002d5a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	795b      	ldrb	r3, [r3, #5]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f805 	bl	8002d5a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d80d      	bhi.n	8002d88 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	33e0      	adds	r3, #224	; 0xe0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	33e0      	adds	r3, #224	; 0xe0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff57 	bl	8002c58 <USBH_LL_IncTimer>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff8f 	bl	8002ce4 <USBH_LL_Connect>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff98 	bl	8002d12 <USBH_LL_Disconnect>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	70fb      	strb	r3, [r7, #3]
 8002df6:	4613      	mov	r3, r2
 8002df8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff49 	bl	8002cac <USBH_LL_PortEnabled>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff49 	bl	8002cc8 <USBH_LL_PortDisabled>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fc06 	bl	8001666 <HAL_HCD_Stop>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f807 	bl	8002e74 <USBH_Get_USB_Status>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d817      	bhi.n	8002eb8 <USBH_Get_USB_Status+0x44>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <USBH_Get_USB_Status+0x1c>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ea7 	.word	0x08002ea7
 8002e98:	08002ead 	.word	0x08002ead
 8002e9c:	08002eb3 	.word	0x08002eb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8002ea4:	e00b      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8002eaa:	e008      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
    break;
 8002eb0:	e005      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8002eb6:	e002      	b.n	8002ebe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	73fb      	strb	r3, [r7, #15]
    break;
 8002ebc:	bf00      	nop
  }
  return usb_status;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4d0d      	ldr	r5, [pc, #52]	; (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	; (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1b64      	subs	r4, r4, r5
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2600      	movs	r6, #0
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4d0b      	ldr	r5, [pc, #44]	; (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	; (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f818 	bl	8002f14 <_init>
 8002ee4:	1b64      	subs	r4, r4, r5
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2600      	movs	r6, #0
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08004fe4 	.word	0x08004fe4
 8002f08:	08004fe4 	.word	0x08004fe4
 8002f0c:	08004fe4 	.word	0x08004fe4
 8002f10:	08004fe8 	.word	0x08004fe8

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
